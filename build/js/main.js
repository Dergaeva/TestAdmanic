function initCarousel(){jQuery("div.carousel1").scrollGallery({mask:"div.gmask",slider:".slideset",slides:".slide",currentNumber:"span.cur-num",totalNumber:"span.all-num",disableWhileAnimating:!0,generatePagination:"div.pagination",circularRotation:!0,pauseOnHover:!1,autoRotation:!1,maskAutoSize:!1,switchTime:2e3,animSpeed:600,stretchSlideToMask:!0,step:1}),jQuery("div.carousel2").scrollGallery({mask:"div.gmask",slider:".slideset",slides:".slide",currentNumber:"span.cur-num",totalNumber:"span.all-num",disableWhileAnimating:!1,generatePagination:"div.pagination",circularRotation:!0,autoRotation:!1,maskAutoSize:!0,switchTime:2e3,animSpeed:600,vertical:!0}),jQuery("div.carousel3").scrollGallery({mask:"div.gmask",slider:".slideset",slides:".slide",currentNumber:"span.cur-num",totalNumber:"span.all-num",disableWhileAnimating:!0,generatePagination:"div.pagination",circularRotation:!0,pauseOnHover:!1,autoRotation:!1,maskAutoSize:!1,switchTime:2e3,animSpeed:600,step:1}),jQuery("div.carousel4").scrollGallery({mask:"div.gmask",slider:".slideset",slides:".slide",currentNumber:"span.cur-num",totalNumber:"span.all-num",disableWhileAnimating:!0,generatePagination:"div.pagination",circularRotation:!0,pauseOnHover:!1,autoRotation:!1,maskAutoSize:!1,switchTime:2e3,animSpeed:600,step:1})}function setEqualHeight(t){var e=0;t.each(function(){currentHeight=$(this).height(),currentHeight>e&&(e=currentHeight)}),t.height(e)}if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=ot.type(t);return"function"!==n&&!ot.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e,n){if(ot.isFunction(e))return ot.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return ot.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(mt.test(e))return ot.filter(e,t,n);e=ot.filter(e,t)}return ot.grep(t,function(t){return Z.call(e,t)>-1!==n})}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return ot.each(t.match(xt)||[],function(t,n){e[n]=!0}),e}function r(){Q.removeEventListener("DOMContentLoaded",r),t.removeEventListener("load",r),ot.ready()}function a(){this.expando=ot.expando+a.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(At,"-$&").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:Dt.test(n)?ot.parseJSON(n):n)}catch(t){}kt.set(t,e,n)}else n=void 0;return n}function c(t,e,n,i){var s,o=1,r=20,a=i?function(){return i.cur()}:function(){return ot.css(t,e,"")},l=a(),c=n&&n[3]||(ot.cssNumber[e]?"":"px"),u=(ot.cssNumber[e]||"px"!==c&&+l)&&Ot.exec(ot.css(t,e));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do o=o||".5",u/=o,ot.style(t,e,u+c);while(o!==(o=a()/l)&&1!==o&&--r)}return n&&(u=+u||+l||0,s=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=s)),s}function u(t,e){var n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&ot.nodeName(t,e)?ot.merge([t],n):n}function h(t,e){for(var n=0,i=t.length;n<i;n++)Et.set(t[n],"globalEval",!e||Et.get(e[n],"globalEval"))}function p(t,e,n,i,s){for(var o,r,a,l,c,p,d=e.createDocumentFragment(),f=[],m=0,g=t.length;m<g;m++)if(o=t[m],o||0===o)if("object"===ot.type(o))ot.merge(f,o.nodeType?[o]:o);else if(Lt.test(o)){for(r=r||d.appendChild(e.createElement("div")),a=(Ht.exec(o)||["",""])[1].toLowerCase(),l=Pt[a]||Pt._default,r.innerHTML=l[1]+ot.htmlPrefilter(o)+l[2],p=l[0];p--;)r=r.lastChild;ot.merge(f,r.childNodes),r=d.firstChild,r.textContent=""}else f.push(e.createTextNode(o));for(d.textContent="",m=0;o=f[m++];)if(i&&ot.inArray(o,i)>-1)s&&s.push(o);else if(c=ot.contains(o.ownerDocument,o),r=u(d.appendChild(o),"script"),c&&h(r),n)for(p=0;o=r[p++];)Rt.test(o.type||"")&&n.push(o);return d}function d(){return!0}function f(){return!1}function m(){try{return Q.activeElement}catch(t){}}function g(t,e,n,i,s,o){var r,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)g(t,a,n,i,e[a],o);return t}if(null==i&&null==s?(s=n,i=n=void 0):null==s&&("string"==typeof n?(s=i,i=void 0):(s=i,i=n,n=void 0)),s===!1)s=f;else if(!s)return t;return 1===o&&(r=s,s=function(t){return ot().off(t),r.apply(this,arguments)},s.guid=r.guid||(r.guid=ot.guid++)),t.each(function(){ot.event.add(this,e,s,i,n)})}function v(t,e){return ot.nodeName(t,"table")&&ot.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function y(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function b(t){var e=Bt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function w(t,e){var n,i,s,o,r,a,l,c;if(1===e.nodeType){if(Et.hasData(t)&&(o=Et.access(t),r=Et.set(e,o),c=o.events)){delete r.handle,r.events={};for(s in c)for(n=0,i=c[s].length;n<i;n++)ot.event.add(e,s,c[s][n])}kt.hasData(t)&&(a=kt.access(t),l=ot.extend({},a),kt.set(e,l))}}function x(t,e){var n=e.nodeName.toLowerCase();"input"===n&&$t.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function T(t,e,n,i){e=G.apply([],e);var s,o,r,a,l,c,h=0,d=t.length,f=d-1,m=e[0],g=ot.isFunction(m);if(g||d>1&&"string"==typeof m&&!it.checkClone&&_t.test(m))return t.each(function(s){var o=t.eq(s);g&&(e[0]=m.call(this,s,o.html())),T(o,e,n,i)});if(d&&(s=p(e,t[0].ownerDocument,!1,t,i),o=s.firstChild,1===s.childNodes.length&&(s=o),o||i)){for(r=ot.map(u(s,"script"),y),a=r.length;h<d;h++)l=s,h!==f&&(l=ot.clone(l,!0,!0),a&&ot.merge(r,u(l,"script"))),n.call(t[h],l,h);if(a)for(c=r[r.length-1].ownerDocument,ot.map(r,b),h=0;h<a;h++)l=r[h],Rt.test(l.type||"")&&!Et.access(l,"globalEval")&&ot.contains(c,l)&&(l.src?ot._evalUrl&&ot._evalUrl(l.src):ot.globalEval(l.textContent.replace(Ut,"")))}return t}function C(t,e,n){for(var i,s=e?ot.filter(e,t):t,o=0;null!=(i=s[o]);o++)n||1!==i.nodeType||ot.cleanData(u(i)),i.parentNode&&(n&&ot.contains(i.ownerDocument,i)&&h(u(i,"script")),i.parentNode.removeChild(i));return t}function S(t,e){var n=ot(e.createElement(t)).appendTo(e.body),i=ot.css(n[0],"display");return n.detach(),i}function E(t){var e=Q,n=Yt[t];return n||(n=S(t,e),"none"!==n&&n||(Xt=(Xt||ot("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Xt[0].contentDocument,e.write(),e.close(),n=S(t,e),Xt.detach()),Yt[t]=n),n}function k(t,e,n){var i,s,o,r,a=t.style;return n=n||Kt(t),r=n?n.getPropertyValue(e)||n[e]:void 0,""!==r&&void 0!==r||ot.contains(t.ownerDocument,t)||(r=ot.style(t,e)),n&&!it.pixelMarginRight()&&Qt.test(r)&&Vt.test(e)&&(i=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=n.width,a.width=i,a.minWidth=s,a.maxWidth=o),void 0!==r?r+"":r}function D(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function A(t){if(t in ie)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ne.length;n--;)if(t=ne[n]+e,t in ie)return t}function N(t,e,n){var i=Ot.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function O(t,e,n,i,s){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,r=0;o<4;o+=2)"margin"===n&&(r+=ot.css(t,n+It[o],!0,s)),i?("content"===n&&(r-=ot.css(t,"padding"+It[o],!0,s)),"margin"!==n&&(r-=ot.css(t,"border"+It[o]+"Width",!0,s))):(r+=ot.css(t,"padding"+It[o],!0,s),"padding"!==n&&(r+=ot.css(t,"border"+It[o]+"Width",!0,s)));return r}function I(t,e,n){var i=!0,s="width"===e?t.offsetWidth:t.offsetHeight,o=Kt(t),r="border-box"===ot.css(t,"boxSizing",!1,o);if(s<=0||null==s){if(s=k(t,e,o),(s<0||null==s)&&(s=t.style[e]),Qt.test(s))return s;i=r&&(it.boxSizingReliable()||s===t.style[e]),s=parseFloat(s)||0}return s+O(t,e,n||(r?"border":"content"),i,o)+"px"}function j(t,e){for(var n,i,s,o=[],r=0,a=t.length;r<a;r++)i=t[r],i.style&&(o[r]=Et.get(i,"olddisplay"),n=i.style.display,e?(o[r]||"none"!==n||(i.style.display=""),""===i.style.display&&jt(i)&&(o[r]=Et.access(i,"olddisplay",E(i.nodeName)))):(s=jt(i),"none"===n&&s||Et.set(i,"olddisplay",s?n:ot.css(i,"display"))));for(r=0;r<a;r++)i=t[r],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[r]||"":"none"));return t}function $(t,e,n,i,s){return new $.prototype.init(t,e,n,i,s)}function H(){return t.setTimeout(function(){se=void 0}),se=ot.now()}function R(t,e){var n,i=0,s={height:t};for(e=e?1:0;i<4;i+=2-e)n=It[i],s["margin"+n]=s["padding"+n]=t;return e&&(s.opacity=s.width=t),s}function P(t,e,n){for(var i,s=(q.tweeners[e]||[]).concat(q.tweeners["*"]),o=0,r=s.length;o<r;o++)if(i=s[o].call(n,e,t))return i}function L(t,e,n){var i,s,o,r,a,l,c,u,h=this,p={},d=t.style,f=t.nodeType&&jt(t),m=Et.get(t,"fxshow");n.queue||(a=ot._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,ot.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],c=ot.css(t,"display"),u="none"===c?Et.get(t,"olddisplay")||E(t.nodeName):c,"inline"===u&&"none"===ot.css(t,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in e)if(s=e[i],re.exec(s)){if(delete e[i],o=o||"toggle"===s,s===(f?"hide":"show")){if("show"!==s||!m||void 0===m[i])continue;f=!0}p[i]=m&&m[i]||ot.style(t,i)}else c=void 0;if(ot.isEmptyObject(p))"inline"===("none"===c?E(t.nodeName):c)&&(d.display=c);else{m?"hidden"in m&&(f=m.hidden):m=Et.access(t,"fxshow",{}),o&&(m.hidden=!f),f?ot(t).show():h.done(function(){ot(t).hide()}),h.done(function(){var e;Et.remove(t,"fxshow");for(e in p)ot.style(t,e,p[e])});for(i in p)r=P(f?m[i]:0,i,h),i in m||(m[i]=r.start,f&&(r.end=r.start,r.start="width"===i||"height"===i?1:0))}}function F(t,e){var n,i,s,o,r;for(n in t)if(i=ot.camelCase(n),s=e[i],o=t[n],ot.isArray(o)&&(s=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),r=ot.cssHooks[i],r&&"expand"in r){o=r.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=s)}else e[i]=s}function q(t,e,n){var i,s,o=0,r=q.prefilters.length,a=ot.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=se||H(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,o=1-i,r=0,l=c.tweens.length;r<l;r++)c.tweens[r].run(o);return a.notifyWith(t,[c,o,n]),o<1&&l?n:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:ot.extend({},e),opts:ot.extend(!0,{specialEasing:{},easing:ot.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||H(),duration:n.duration,tweens:[],createTween:function(e,n){var i=ot.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(s)return this;for(s=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(F(u,c.opts.specialEasing);o<r;o++)if(i=q.prefilters[o].call(c,t,u,c.opts))return ot.isFunction(i.stop)&&(ot._queueHooks(c.elem,c.opts.queue).stop=ot.proxy(i.stop,i)),i;return ot.map(u,P,c),ot.isFunction(c.opts.start)&&c.opts.start.call(t,c),ot.fx.timer(ot.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function M(t){return t.getAttribute&&t.getAttribute("class")||""}function z(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,s=0,o=e.toLowerCase().match(xt)||[];if(ot.isFunction(n))for(;i=o[s++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function W(t,e,n,i){function s(a){var l;return o[a]=!0,ot.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),l}var o={},r=t===ke;return s(e.dataTypes[0])||!o["*"]&&s("*")}function _(t,e){var n,i,s=ot.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((s[n]?t:i||(i={}))[n]=e[n]);return i&&ot.extend(!0,t,i),t}function B(t,e,n){for(var i,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){l.unshift(s);break}if(l[0]in n)o=l[0];else{for(s in n){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),n[o]}function U(t,e,n,i){var s,o,r,a,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(r=c[l+" "+o]||c["* "+o],!r)for(s in c)if(a=s.split(" "),a[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){r===!0?r=c[s]:c[s]!==!0&&(o=a[0],u.unshift(a[1]));break}if(r!==!0)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function X(t,e,n,i){var s;if(ot.isArray(e))ot.each(e,function(e,s){n||Oe.test(t)?i(t,s):X(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,n,i)});else if(n||"object"!==ot.type(e))i(t,e);else for(s in e)X(t+"["+s+"]",e[s],n,i)}function Y(t){return ot.isWindow(t)?t:9===t.nodeType&&t.defaultView}var V=[],Q=t.document,K=V.slice,G=V.concat,J=V.push,Z=V.indexOf,tt={},et=tt.toString,nt=tt.hasOwnProperty,it={},st="2.2.4",ot=function(t,e){return new ot.fn.init(t,e)},rt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,at=/^-ms-/,lt=/-([\da-z])/gi,ct=function(t,e){return e.toUpperCase()};ot.fn=ot.prototype={jquery:st,constructor:ot,selector:"",length:0,toArray:function(){return K.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:K.call(this)},pushStack:function(t){var e=ot.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return ot.each(this,t)},map:function(t){return this.pushStack(ot.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(K.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:J,sort:V.sort,splice:V.splice},ot.extend=ot.fn.extend=function(){var t,e,n,i,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||ot.isFunction(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=r[e],i=t[e],r!==i&&(c&&i&&(ot.isPlainObject(i)||(s=ot.isArray(i)))?(s?(s=!1,o=n&&ot.isArray(n)?n:[]):o=n&&ot.isPlainObject(n)?n:{},r[e]=ot.extend(c,o,i)):void 0!==i&&(r[e]=i));return r},ot.extend({expando:"jQuery"+(st+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ot.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!ot.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==ot.type(t)||t.nodeType||ot.isWindow(t))return!1;if(t.constructor&&!nt.call(t,"constructor")&&!nt.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||nt.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?tt[et.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=ot.trim(t),t&&(1===t.indexOf("use strict")?(e=Q.createElement("script"),e.text=t,Q.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(at,"ms-").replace(lt,ct)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,s=0;if(n(t))for(i=t.length;s<i&&e.call(t[s],s,t[s])!==!1;s++);else for(s in t)if(e.call(t[s],s,t[s])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(rt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?ot.merge(i,"string"==typeof t?[t]:t):J.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Z.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,s=t.length;i<n;i++)t[s++]=e[i];return t.length=s,t},grep:function(t,e,n){for(var i,s=[],o=0,r=t.length,a=!n;o<r;o++)i=!e(t[o],o),i!==a&&s.push(t[o]);return s},map:function(t,e,i){var s,o,r=0,a=[];if(n(t))for(s=t.length;r<s;r++)o=e(t[r],r,i),null!=o&&a.push(o);else for(r in t)o=e(t[r],r,i),null!=o&&a.push(o);return G.apply([],a)},guid:1,proxy:function(t,e){var n,i,s;if("string"==typeof e&&(n=t[e],e=t,t=n),ot.isFunction(t))return i=K.call(arguments,2),s=function(){return t.apply(e||this,i.concat(K.call(arguments)))},s.guid=t.guid=t.guid||ot.guid++,s},now:Date.now,support:it}),"function"==typeof Symbol&&(ot.fn[Symbol.iterator]=V[Symbol.iterator]),ot.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){tt["[object "+e+"]"]=e.toLowerCase()});var ut=function(t){function e(t,e,n,i){var s,o,r,a,l,c,h,d,f=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!i&&((e?e.ownerDocument||e:M)!==j&&I(e),e=e||j,H)){if(11!==m&&(c=vt.exec(t)))if(s=c[1]){if(9===m){if(!(r=e.getElementById(s)))return n;if(r.id===s)return n.push(r),n}else if(f&&(r=f.getElementById(s))&&F(e,r)&&r.id===s)return n.push(r),n}else{if(c[2])return J.apply(n,e.getElementsByTagName(t)),n;if((s=c[3])&&x.getElementsByClassName&&e.getElementsByClassName)return J.apply(n,e.getElementsByClassName(s)),n}if(x.qsa&&!U[t+" "]&&(!R||!R.test(t))){if(1!==m)f=e,d=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(bt,"\\$&"):e.setAttribute("id",a=q),h=E(t),o=h.length,l=pt.test(a)?"#"+a:"[id='"+a+"']";o--;)h[o]=l+" "+p(h[o]);d=h.join(","),f=yt.test(t)&&u(e.parentNode)||e}if(d)try{return J.apply(n,f.querySelectorAll(d)),n}catch(t){}finally{a===q&&e.removeAttribute("id")}}}return D(t.replace(at,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>T.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[q]=!0,t}function s(t){var e=j.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)T.attrHandle[n[i]]=e}function r(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||Y)-(~t.sourceIndex||Y);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var s,o=t([],n.length,e),r=o.length;r--;)n[s=o[r]]&&(n[s]=!(i[s]=n[s]))})})}function u(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function d(t,e,n){var i=e.dir,s=n&&"parentNode"===i,o=W++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,o)}:function(e,n,r){var a,l,c,u=[z,o];if(r){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,r))return!0}else for(;e=e[i];)if(1===e.nodeType||s){if(c=e[q]||(e[q]={}),l=c[e.uniqueID]||(c[e.uniqueID]={}),(a=l[i])&&a[0]===z&&a[1]===o)return u[2]=a[2];if(l[i]=u,u[2]=t(e,n,r))return!0}}}function f(t){return t.length>1?function(e,n,i){for(var s=t.length;s--;)if(!t[s](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var s=0,o=n.length;s<o;s++)e(t,n[s],i);return i}function g(t,e,n,i,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,s)||(r.push(o),c&&e.push(a)));return r}function v(t,e,n,s,o,r){return s&&!s[q]&&(s=v(s)),o&&!o[q]&&(o=v(o,r)),i(function(i,r,a,l){var c,u,h,p=[],d=[],f=r.length,v=i||m(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:g(v,p,t,a,l),b=n?o||(i?t:f||s)?[]:r:y;if(n&&n(y,b,a,l),s)for(c=g(b,d),s(c,[],a,l),u=c.length;u--;)(h=c[u])&&(b[d[u]]=!(y[d[u]]=h));if(i){if(o||t){if(o){for(c=[],u=b.length;u--;)(h=b[u])&&c.push(y[u]=h);o(null,b=[],c,l)}for(u=b.length;u--;)(h=b[u])&&(c=o?tt(i,h):p[u])>-1&&(i[c]=!(r[c]=h))}}else b=g(b===r?b.splice(f,b.length):b),o?o(null,r,b,l):J.apply(r,b)})}function y(t){for(var e,n,i,s=t.length,o=T.relative[t[0].type],r=o||T.relative[" "],a=o?1:0,l=d(function(t){return t===e},r,!0),c=d(function(t){return tt(e,t)>-1},r,!0),u=[function(t,n,i){var s=!o&&(i||n!==A)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,s}];a<s;a++)if(n=T.relative[t[a].type])u=[d(f(u),n)];else{if(n=T.filter[t[a].type].apply(null,t[a].matches),n[q]){for(i=++a;i<s&&!T.relative[t[i].type];i++);return v(a>1&&f(u),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),n,a<i&&y(t.slice(a,i)),i<s&&y(t=t.slice(i)),i<s&&p(t))}u.push(n)}return f(u)}function b(t,n){var s=n.length>0,o=t.length>0,r=function(i,r,a,l,c){var u,h,p,d=0,f="0",m=i&&[],v=[],y=A,b=i||o&&T.find.TAG("*",c),w=z+=null==y?1:Math.random()||.1,x=b.length;for(c&&(A=r===j||r||c);f!==x&&null!=(u=b[f]);f++){if(o&&u){for(h=0,r||u.ownerDocument===j||(I(u),a=!H);p=t[h++];)if(p(u,r||j,a)){l.push(u);break}c&&(z=w)}s&&((u=!p&&u)&&d--,i&&m.push(u))}if(d+=f,s&&f!==d){for(h=0;p=n[h++];)p(m,v,r,a);if(i){if(d>0)for(;f--;)m[f]||v[f]||(v[f]=K.call(l));v=g(v)}J.apply(l,v),c&&!i&&v.length>0&&d+n.length>1&&e.uniqueSort(l)}return c&&(z=w,A=y),m};return s?i(r):r}var w,x,T,C,S,E,k,D,A,N,O,I,j,$,H,R,P,L,F,q="sizzle"+1*new Date,M=t.document,z=0,W=0,_=n(),B=n(),U=n(),X=function(t,e){return t===e&&(O=!0),0},Y=1<<31,V={}.hasOwnProperty,Q=[],K=Q.pop,G=Q.push,J=Q.push,Z=Q.slice,tt=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",st="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",ot=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+st+")*)|.*)\\)|)",rt=new RegExp(nt+"+","g"),at=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ut=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(ot),pt=new RegExp("^"+it+"$"),dt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it+"|[*])"),ATTR:new RegExp("^"+st),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/[+~]/,bt=/'|\\/g,wt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Tt=function(){I()};try{J.apply(Q=Z.call(M.childNodes),M.childNodes),Q[M.childNodes.length].nodeType}catch(t){J={apply:Q.length?function(t,e){G.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}x=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},I=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:M;return i!==j&&9===i.nodeType&&i.documentElement?(j=i,$=j.documentElement,H=!S(j),(n=j.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Tt,!1):n.attachEvent&&n.attachEvent("onunload",Tt)),x.attributes=s(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=s(function(t){return t.appendChild(j.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=gt.test(j.getElementsByClassName),x.getById=s(function(t){return $.appendChild(t).id=q,!j.getElementsByName||!j.getElementsByName(q).length}),x.getById?(T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&H){var n=e.getElementById(t);return n?[n]:[]}},T.filter.ID=function(t){var e=t.replace(wt,xt);return function(t){return t.getAttribute("id")===e}}):(delete T.find.ID,T.filter.ID=function(t){var e=t.replace(wt,xt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),T.find.TAG=x.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):x.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],s=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[s++];)1===n.nodeType&&i.push(n);return i}return o},T.find.CLASS=x.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&H)return e.getElementsByClassName(t)},P=[],R=[],(x.qsa=gt.test(j.querySelectorAll))&&(s(function(t){$.appendChild(t).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&R.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||R.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+q+"-]").length||R.push("~="),t.querySelectorAll(":checked").length||R.push(":checked"),t.querySelectorAll("a#"+q+"+*").length||R.push(".#.+[+~]")}),s(function(t){var e=j.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&R.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||R.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),R.push(",.*:")})),(x.matchesSelector=gt.test(L=$.matches||$.webkitMatchesSelector||$.mozMatchesSelector||$.oMatchesSelector||$.msMatchesSelector))&&s(function(t){x.disconnectedMatch=L.call(t,"div"),L.call(t,"[s!='']:x"),P.push("!=",ot)}),R=R.length&&new RegExp(R.join("|")),P=P.length&&new RegExp(P.join("|")),e=gt.test($.compareDocumentPosition),F=e||gt.test($.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return O=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!x.sortDetached&&e.compareDocumentPosition(t)===n?t===j||t.ownerDocument===M&&F(M,t)?-1:e===j||e.ownerDocument===M&&F(M,e)?1:N?tt(N,t)-tt(N,e):0:4&n?-1:1)}:function(t,e){if(t===e)return O=!0,0;var n,i=0,s=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!s||!o)return t===j?-1:e===j?1:s?-1:o?1:N?tt(N,t)-tt(N,e):0;if(s===o)return r(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?r(a[i],l[i]):a[i]===M?-1:l[i]===M?1:0},j):j},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==j&&I(t),n=n.replace(ut,"='$1']"),x.matchesSelector&&H&&!U[n+" "]&&(!P||!P.test(n))&&(!R||!R.test(n)))try{var i=L.call(t,n);if(i||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,j,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==j&&I(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==j&&I(t);var n=T.attrHandle[e.toLowerCase()],i=n&&V.call(T.attrHandle,e.toLowerCase())?n(t,e,!H):void 0;return void 0!==i?i:x.attributes||!H?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,s=0;if(O=!x.detectDuplicates,N=!x.sortStable&&t.slice(0),t.sort(X),O){for(;e=t[s++];)e===t[s]&&(i=n.push(s));for(;i--;)t.splice(n[i],1)}return N=null,t},C=e.getText=function(t){var e,n="",i=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=C(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[i++];)n+=C(e);return n},T=e.selectors={cacheLength:50,createPseudo:i,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(wt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(wt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=E(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(wt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=_[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&_(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(s){var o=e.attr(s,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(rt," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===s?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,p,d,f,m=o!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;m;){for(p=e;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(p=g,h=p[q]||(p[q]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),c=u[t]||[],d=c[0]===z&&c[1],b=d&&c[2],p=d&&g.childNodes[d];p=++d&&p&&p[m]||(b=d=0)||f.pop();)if(1===p.nodeType&&++b&&p===e){u[t]=[z,d,b];break}}else if(y&&(p=e,h=p[q]||(p[q]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),c=u[t]||[],d=c[0]===z&&c[1],b=d),b===!1)for(;(p=++d&&p&&p[m]||(b=d=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&(h=p[q]||(p[q]={}),u=h[p.uniqueID]||(h[p.uniqueID]={}),u[t]=[z,b]),p!==e)););return b-=s,b===i||b%i===0&&b/i>=0}}},PSEUDO:function(t,n){var s,o=T.pseudos[t]||T.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[q]?o(n):o.length>1?(s=[t,t,"",n],T.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,s=o(t,n),r=s.length;r--;)i=tt(t,s[r]),t[i]=!(e[i]=s[r])}):function(t){return o(t,0,s)}):o}},pseudos:{not:i(function(t){var e=[],n=[],s=k(t.replace(at,"$1"));return s[q]?i(function(t,e,n,i){for(var o,r=s(t,null,i,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,s(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(wt,xt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:i(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),
t=t.replace(wt,xt).toLowerCase(),function(e){var n;do if(n=H?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===$},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},T.pseudos.nth=T.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})T.pseudos[w]=l(w);return h.prototype=T.filters=T.pseudos,T.setFilters=new h,E=e.tokenize=function(t,n){var i,s,o,r,a,l,c,u=B[t+" "];if(u)return n?0:u.slice(0);for(a=t,l=[],c=T.preFilter;a;){i&&!(s=lt.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),i=!1,(s=ct.exec(a))&&(i=s.shift(),o.push({value:i,type:s[0].replace(at," ")}),a=a.slice(i.length));for(r in T.filter)!(s=dt[r].exec(a))||c[r]&&!(s=c[r](s))||(i=s.shift(),o.push({value:i,type:r,matches:s}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):B(t,l).slice(0)},k=e.compile=function(t,e){var n,i=[],s=[],o=U[t+" "];if(!o){for(e||(e=E(t)),n=e.length;n--;)o=y(e[n]),o[q]?i.push(o):s.push(o);o=U(t,b(s,i)),o.selector=t}return o},D=e.select=function(t,e,n,i){var s,o,r,a,l,c="function"==typeof t&&t,h=!i&&E(t=c.selector||t);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(r=o[0]).type&&x.getById&&9===e.nodeType&&H&&T.relative[o[1].type]){if(e=(T.find.ID(r.matches[0].replace(wt,xt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(s=dt.needsContext.test(t)?0:o.length;s--&&(r=o[s],!T.relative[a=r.type]);)if((l=T.find[a])&&(i=l(r.matches[0].replace(wt,xt),yt.test(o[0].type)&&u(e.parentNode)||e))){if(o.splice(s,1),t=i.length&&p(o),!t)return J.apply(n,i),n;break}}return(c||k(t,h))(i,e,!H,n,!e||yt.test(t)&&u(e.parentNode)||e),n},x.sortStable=q.split("").sort(X).join("")===q,x.detectDuplicates=!!O,I(),x.sortDetached=s(function(t){return 1&t.compareDocumentPosition(j.createElement("div"))}),s(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&s(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),s(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;if(!n)return t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);ot.find=ut,ot.expr=ut.selectors,ot.expr[":"]=ot.expr.pseudos,ot.uniqueSort=ot.unique=ut.uniqueSort,ot.text=ut.getText,ot.isXMLDoc=ut.isXML,ot.contains=ut.contains;var ht=function(t,e,n){for(var i=[],s=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&ot(t).is(n))break;i.push(t)}return i},pt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},dt=ot.expr.match.needsContext,ft=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,mt=/^.[^:#\[\.,]*$/;ot.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?ot.find.matchesSelector(i,t)?[i]:[]:ot.find.matches(t,ot.grep(e,function(t){return 1===t.nodeType}))},ot.fn.extend({find:function(t){var e,n=this.length,i=[],s=this;if("string"!=typeof t)return this.pushStack(ot(t).filter(function(){for(e=0;e<n;e++)if(ot.contains(s[e],this))return!0}));for(e=0;e<n;e++)ot.find(t,s[e],i);return i=this.pushStack(n>1?ot.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&dt.test(t)?ot(t):t||[],!1).length}});var gt,vt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,yt=ot.fn.init=function(t,e,n){var i,s;if(!t)return this;if(n=n||gt,"string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:vt.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof ot?e[0]:e,ot.merge(this,ot.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:Q,!0)),ft.test(i[1])&&ot.isPlainObject(e))for(i in e)ot.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return s=Q.getElementById(i[2]),s&&s.parentNode&&(this.length=1,this[0]=s),this.context=Q,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ot.isFunction(t)?void 0!==n.ready?n.ready(t):t(ot):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ot.makeArray(t,this))};yt.prototype=ot.fn,gt=ot(Q);var bt=/^(?:parents|prev(?:Until|All))/,wt={children:!0,contents:!0,next:!0,prev:!0};ot.fn.extend({has:function(t){var e=ot(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(ot.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,s=this.length,o=[],r=dt.test(t)||"string"!=typeof t?ot(t,e||this.context):0;i<s;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?r.index(n)>-1:1===n.nodeType&&ot.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?ot.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?Z.call(ot(t),this[0]):Z.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ot.uniqueSort(ot.merge(this.get(),ot(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ot.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ht(t,"parentNode")},parentsUntil:function(t,e,n){return ht(t,"parentNode",n)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return ht(t,"nextSibling")},prevAll:function(t){return ht(t,"previousSibling")},nextUntil:function(t,e,n){return ht(t,"nextSibling",n)},prevUntil:function(t,e,n){return ht(t,"previousSibling",n)},siblings:function(t){return pt((t.parentNode||{}).firstChild,t)},children:function(t){return pt(t.firstChild)},contents:function(t){return t.contentDocument||ot.merge([],t.childNodes)}},function(t,e){ot.fn[t]=function(n,i){var s=ot.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(s=ot.filter(i,s)),this.length>1&&(wt[t]||ot.uniqueSort(s),bt.test(t)&&s.reverse()),this.pushStack(s)}});var xt=/\S+/g;ot.Callbacks=function(t){t="string"==typeof t?o(t):ot.extend({},t);var e,n,i,s,r=[],a=[],l=-1,c=function(){for(s=t.once,i=e=!0;a.length;l=-1)for(n=a.shift();++l<r.length;)r[l].apply(n[0],n[1])===!1&&t.stopOnFalse&&(l=r.length,n=!1);t.memory||(n=!1),e=!1,s&&(r=n?[]:"")},u={add:function(){return r&&(n&&!e&&(l=r.length-1,a.push(n)),function e(n){ot.each(n,function(n,i){ot.isFunction(i)?t.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==ot.type(i)&&e(i)})}(arguments),n&&!e&&c()),this},remove:function(){return ot.each(arguments,function(t,e){for(var n;(n=ot.inArray(e,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(t){return t?ot.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return s=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return s=a=[],n||(r=n=""),this},locked:function(){return!!s},fireWith:function(t,n){return s||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},ot.extend({Deferred:function(t){var e=[["resolve","done",ot.Callbacks("once memory"),"resolved"],["reject","fail",ot.Callbacks("once memory"),"rejected"],["notify","progress",ot.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ot.Deferred(function(n){ot.each(e,function(e,o){var r=ot.isFunction(t[e])&&t[e];s[o[1]](function(){var t=r&&r.apply(this,arguments);t&&ot.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,r?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ot.extend(t,i):i}},s={};return i.pipe=i.then,ot.each(e,function(t,o){var r=o[2],a=o[3];i[o[1]]=r.add,a&&r.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),s[o[0]]=function(){return s[o[0]+"With"](this===s?i:this,arguments),this},s[o[0]+"With"]=r.fireWith}),i.promise(s),t&&t.call(s,s),s},when:function(t){var e,n,i,s=0,o=K.call(arguments),r=o.length,a=1!==r||t&&ot.isFunction(t.promise)?r:0,l=1===a?t:ot.Deferred(),c=function(t,n,i){return function(s){n[t]=this,i[t]=arguments.length>1?K.call(arguments):s,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(r>1)for(e=new Array(r),n=new Array(r),i=new Array(r);s<r;s++)o[s]&&ot.isFunction(o[s].promise)?o[s].promise().progress(c(s,n,e)).done(c(s,i,o)).fail(l.reject):--a;return a||l.resolveWith(i,o),l.promise()}});var Tt;ot.fn.ready=function(t){return ot.ready.promise().done(t),this},ot.extend({isReady:!1,readyWait:1,holdReady:function(t){t?ot.readyWait++:ot.ready(!0)},ready:function(t){(t===!0?--ot.readyWait:ot.isReady)||(ot.isReady=!0,t!==!0&&--ot.readyWait>0||(Tt.resolveWith(Q,[ot]),ot.fn.triggerHandler&&(ot(Q).triggerHandler("ready"),ot(Q).off("ready"))))}}),ot.ready.promise=function(e){return Tt||(Tt=ot.Deferred(),"complete"===Q.readyState||"loading"!==Q.readyState&&!Q.documentElement.doScroll?t.setTimeout(ot.ready):(Q.addEventListener("DOMContentLoaded",r),t.addEventListener("load",r))),Tt.promise(e)},ot.ready.promise();var Ct=function(t,e,n,i,s,o,r){var a=0,l=t.length,c=null==n;if("object"===ot.type(n)){s=!0;for(a in n)Ct(t,e,a,n[a],!0,o,r)}else if(void 0!==i&&(s=!0,ot.isFunction(i)||(r=!0),c&&(r?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(ot(t),n)})),e))for(;a<l;a++)e(t[a],n,r?i:i.call(t[a],a,e(t[a],n)));return s?t:c?e.call(t):l?e(t[0],n):o},St=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};a.uid=1,a.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!St(t))return{};var e=t[this.expando];return e||(e={},St(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,s=this.cache(t);if("string"==typeof e)s[e]=n;else for(i in e)s[i]=e[i];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,ot.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,s,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{ot.isArray(e)?i=e.concat(e.map(ot.camelCase)):(s=ot.camelCase(e),e in o?i=[e,s]:(i=s,i=i in o?[i]:i.match(xt)||[])),n=i.length;for(;n--;)delete o[i[n]]}(void 0===e||ot.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!ot.isEmptyObject(e)}};var Et=new a,kt=new a,Dt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,At=/[A-Z]/g;ot.extend({hasData:function(t){return kt.hasData(t)||Et.hasData(t)},data:function(t,e,n){return kt.access(t,e,n)},removeData:function(t,e){kt.remove(t,e)},_data:function(t,e,n){return Et.access(t,e,n)},_removeData:function(t,e){Et.remove(t,e)}}),ot.fn.extend({data:function(t,e){var n,i,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=kt.get(o),1===o.nodeType&&!Et.get(o,"hasDataAttrs"))){for(n=r.length;n--;)r[n]&&(i=r[n].name,0===i.indexOf("data-")&&(i=ot.camelCase(i.slice(5)),l(o,i,s[i])));Et.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each(function(){kt.set(this,t)}):Ct(this,function(e){var n,i;if(o&&void 0===e){if(n=kt.get(o,t)||kt.get(o,t.replace(At,"-$&").toLowerCase()),void 0!==n)return n;if(i=ot.camelCase(t),n=kt.get(o,i),void 0!==n)return n;if(n=l(o,i,void 0),void 0!==n)return n}else i=ot.camelCase(t),this.each(function(){var n=kt.get(this,i);kt.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&kt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){kt.remove(this,t)})}}),ot.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Et.get(t,e),n&&(!i||ot.isArray(n)?i=Et.access(t,e,ot.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=ot.queue(t,e),i=n.length,s=n.shift(),o=ot._queueHooks(t,e),r=function(){ot.dequeue(t,e)};"inprogress"===s&&(s=n.shift(),i--),s&&("fx"===e&&n.unshift("inprogress"),delete o.stop,s.call(t,r,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Et.get(t,n)||Et.access(t,n,{empty:ot.Callbacks("once memory").add(function(){Et.remove(t,[e+"queue",n])})})}}),ot.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?ot.queue(this[0],t):void 0===e?this:this.each(function(){var n=ot.queue(this,t,e);ot._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&ot.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ot.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,s=ot.Deferred(),o=this,r=this.length,a=function(){--i||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)n=Et.get(o[r],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),s.promise(e)}});var Nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ot=new RegExp("^(?:([+-])=|)("+Nt+")([a-z%]*)$","i"),It=["Top","Right","Bottom","Left"],jt=function(t,e){return t=e||t,"none"===ot.css(t,"display")||!ot.contains(t.ownerDocument,t)},$t=/^(?:checkbox|radio)$/i,Ht=/<([\w:-]+)/,Rt=/^$|\/(?:java|ecma)script/i,Pt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Pt.optgroup=Pt.option,Pt.tbody=Pt.tfoot=Pt.colgroup=Pt.caption=Pt.thead,Pt.th=Pt.td;var Lt=/<|&#?\w+;/;!function(){var t=Q.createDocumentFragment(),e=t.appendChild(Q.createElement("div")),n=Q.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),it.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",it.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ft=/^key/,qt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Mt=/^([^.]*)(?:\.(.+)|)/;ot.event={global:{},add:function(t,e,n,i,s){var o,r,a,l,c,u,h,p,d,f,m,g=Et.get(t);if(g)for(n.handler&&(o=n,n=o.handler,s=o.selector),n.guid||(n.guid=ot.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(e){return"undefined"!=typeof ot&&ot.event.triggered!==e.type?ot.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(xt)||[""],c=e.length;c--;)a=Mt.exec(e[c])||[],d=m=a[1],f=(a[2]||"").split(".").sort(),d&&(h=ot.event.special[d]||{},d=(s?h.delegateType:h.bindType)||d,h=ot.event.special[d]||{},u=ot.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:s,needsContext:s&&ot.expr.match.needsContext.test(s),namespace:f.join(".")},o),(p=l[d])||(p=l[d]=[],p.delegateCount=0,h.setup&&h.setup.call(t,i,f,r)!==!1||t.addEventListener&&t.addEventListener(d,r)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),s?p.splice(p.delegateCount++,0,u):p.push(u),ot.event.global[d]=!0)},remove:function(t,e,n,i,s){var o,r,a,l,c,u,h,p,d,f,m,g=Et.hasData(t)&&Et.get(t);if(g&&(l=g.events)){for(e=(e||"").match(xt)||[""],c=e.length;c--;)if(a=Mt.exec(e[c])||[],d=m=a[1],f=(a[2]||"").split(".").sort(),d){for(h=ot.event.special[d]||{},d=(i?h.delegateType:h.bindType)||d,p=l[d]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=p.length;o--;)u=p[o],!s&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,h.remove&&h.remove.call(t,u));r&&!p.length&&(h.teardown&&h.teardown.call(t,f,g.handle)!==!1||ot.removeEvent(t,d,g.handle),delete l[d])}else for(d in l)ot.event.remove(t,d+e[c],n,i,!0);ot.isEmptyObject(l)&&Et.remove(t,"handle events")}},dispatch:function(t){t=ot.event.fix(t);var e,n,i,s,o,r=[],a=K.call(arguments),l=(Et.get(this,"events")||{})[t.type]||[],c=ot.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(r=ot.event.handlers.call(this,t,l),e=0;(s=r[e++])&&!t.isPropagationStopped();)for(t.currentTarget=s.elem,n=0;(o=s.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,i=((ot.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,s,o,r=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(i=[],n=0;n<a;n++)o=e[n],s=o.selector+" ",void 0===i[s]&&(i[s]=o.needsContext?ot(s,this).index(l)>-1:ot.find(s,this,null,[l]).length),i[s]&&i.push(o);i.length&&r.push({elem:l,handlers:i})}return a<e.length&&r.push({elem:this,handlers:e.slice(a)}),r},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,s,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Q,i=n.documentElement,s=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||s&&s.scrollLeft||0)-(i&&i.clientLeft||s&&s.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||s&&s.scrollTop||0)-(i&&i.clientTop||s&&s.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[ot.expando])return t;var e,n,i,s=t.type,o=t,r=this.fixHooks[s];for(r||(this.fixHooks[s]=r=qt.test(s)?this.mouseHooks:Ft.test(s)?this.keyHooks:{}),i=r.props?this.props.concat(r.props):this.props,t=new ot.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=Q),3===t.target.nodeType&&(t.target=t.target.parentNode),r.filter?r.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==m()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===m()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&ot.nodeName(this,"input"))return this.click(),!1},_default:function(t){return ot.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},ot.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},ot.Event=function(t,e){return this instanceof ot.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?d:f):this.type=t,e&&ot.extend(this,e),this.timeStamp=t&&t.timeStamp||ot.now(),void(this[ot.expando]=!0)):new ot.Event(t,e)},ot.Event.prototype={constructor:ot.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=d,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=d,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=d,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},ot.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ot.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,s=t.relatedTarget,o=t.handleObj;return s&&(s===i||ot.contains(i,s))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),ot.fn.extend({on:function(t,e,n,i){return g(this,t,e,n,i)},one:function(t,e,n,i){return g(this,t,e,n,i,1)},off:function(t,e,n){var i,s;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,ot(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=f),this.each(function(){ot.event.remove(this,t,n,e)})}});var zt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Wt=/<script|<style|<link/i,_t=/checked\s*(?:[^=]|=\s*.checked.)/i,Bt=/^true\/(.*)/,Ut=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ot.extend({htmlPrefilter:function(t){return t.replace(zt,"<$1></$2>")},clone:function(t,e,n){var i,s,o,r,a=t.cloneNode(!0),l=ot.contains(t.ownerDocument,t);if(!(it.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ot.isXMLDoc(t)))for(r=u(a),o=u(t),i=0,s=o.length;i<s;i++)x(o[i],r[i]);if(e)if(n)for(o=o||u(t),r=r||u(a),i=0,s=o.length;i<s;i++)w(o[i],r[i]);else w(t,a);return r=u(a,"script"),r.length>0&&h(r,!l&&u(t,"script")),a},cleanData:function(t){for(var e,n,i,s=ot.event.special,o=0;void 0!==(n=t[o]);o++)if(St(n)){if(e=n[Et.expando]){if(e.events)for(i in e.events)s[i]?ot.event.remove(n,i):ot.removeEvent(n,i,e.handle);n[Et.expando]=void 0}n[kt.expando]&&(n[kt.expando]=void 0)}}}),ot.fn.extend({domManip:T,detach:function(t){return C(this,t,!0)},remove:function(t){return C(this,t)},text:function(t){return Ct(this,function(t){return void 0===t?ot.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return T(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.appendChild(t)}})},prepend:function(){return T(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return T(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return T(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(ot.cleanData(u(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return ot.clone(this,t,e)})},html:function(t){return Ct(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Wt.test(t)&&!Pt[(Ht.exec(t)||["",""])[1].toLowerCase()]){t=ot.htmlPrefilter(t);try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(ot.cleanData(u(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return T(this,arguments,function(e){var n=this.parentNode;ot.inArray(this,t)<0&&(ot.cleanData(u(this)),n&&n.replaceChild(e,this))},t)}}),ot.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ot.fn[t]=function(t){for(var n,i=[],s=ot(t),o=s.length-1,r=0;r<=o;r++)n=r===o?this:this.clone(!0),ot(s[r])[e](n),J.apply(i,n.get());return this.pushStack(i)}});var Xt,Yt={HTML:"block",BODY:"block"},Vt=/^margin/,Qt=new RegExp("^("+Nt+")(?!px)[a-z%]+$","i"),Kt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Gt=function(t,e,n,i){var s,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];s=n.apply(t,i||[]);for(o in e)t.style[o]=r[o];return s},Jt=Q.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Jt.appendChild(r);var e=t.getComputedStyle(a);n="1%"!==e.top,o="2px"===e.marginLeft,i="4px"===e.width,a.style.marginRight="50%",s="4px"===e.marginRight,Jt.removeChild(r)}var n,i,s,o,r=Q.createElement("div"),a=Q.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",it.clearCloneStyle="content-box"===a.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(a),ot.extend(it,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},pixelMarginRight:function(){return null==i&&e(),s},reliableMarginLeft:function(){return null==i&&e(),o},reliableMarginRight:function(){var e,n=a.appendChild(Q.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Jt.appendChild(r),e=!parseFloat(t.getComputedStyle(n).marginRight),Jt.removeChild(r),a.removeChild(n),e}}))}();var Zt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"},ne=["Webkit","O","Moz","ms"],ie=Q.createElement("div").style;ot.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=k(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=ot.camelCase(e),l=t.style;return e=ot.cssProps[a]||(ot.cssProps[a]=A(a)||a),r=ot.cssHooks[e]||ot.cssHooks[a],void 0===n?r&&"get"in r&&void 0!==(s=r.get(t,!1,i))?s:l[e]:(o=typeof n,"string"===o&&(s=Ot.exec(n))&&s[1]&&(n=c(t,e,s),o="number"),null!=n&&n===n&&("number"===o&&(n+=s&&s[3]||(ot.cssNumber[a]?"":"px")),it.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),r&&"set"in r&&void 0===(n=r.set(t,n,i))||(l[e]=n)),void 0)}},css:function(t,e,n,i){var s,o,r,a=ot.camelCase(e);return e=ot.cssProps[a]||(ot.cssProps[a]=A(a)||a),r=ot.cssHooks[e]||ot.cssHooks[a],r&&"get"in r&&(s=r.get(t,!0,n)),void 0===s&&(s=k(t,e,i)),"normal"===s&&e in ee&&(s=ee[e]),""===n||n?(o=parseFloat(s),n===!0||isFinite(o)?o||0:s):s}}),ot.each(["height","width"],function(t,e){ot.cssHooks[e]={get:function(t,n,i){if(n)return Zt.test(ot.css(t,"display"))&&0===t.offsetWidth?Gt(t,te,function(){return I(t,e,i)}):I(t,e,i)},set:function(t,n,i){var s,o=i&&Kt(t),r=i&&O(t,e,i,"border-box"===ot.css(t,"boxSizing",!1,o),o);return r&&(s=Ot.exec(n))&&"px"!==(s[3]||"px")&&(t.style[e]=n,n=ot.css(t,e)),N(t,n,r)}}}),ot.cssHooks.marginLeft=D(it.reliableMarginLeft,function(t,e){if(e)return(parseFloat(k(t,"marginLeft"))||t.getBoundingClientRect().left-Gt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),ot.cssHooks.marginRight=D(it.reliableMarginRight,function(t,e){if(e)return Gt(t,{display:"inline-block"},k,[t,"marginRight"])}),ot.each({margin:"",padding:"",border:"Width"},function(t,e){ot.cssHooks[t+e]={expand:function(n){for(var i=0,s={},o="string"==typeof n?n.split(" "):[n];i<4;i++)s[t+It[i]+e]=o[i]||o[i-2]||o[0];return s}},Vt.test(t)||(ot.cssHooks[t+e].set=N)}),ot.fn.extend({css:function(t,e){return Ct(this,function(t,e,n){var i,s,o={},r=0;if(ot.isArray(e)){for(i=Kt(t),s=e.length;r<s;r++)o[e[r]]=ot.css(t,e[r],!1,i);return o}return void 0!==n?ot.style(t,e,n):ot.css(t,e)},t,e,arguments.length>1)},show:function(){return j(this,!0)},hide:function(){return j(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){jt(this)?ot(this).show():ot(this).hide()})}}),ot.Tween=$,$.prototype={constructor:$,init:function(t,e,n,i,s,o){this.elem=t,this.prop=n,this.easing=s||ot.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ot.cssNumber[n]?"":"px")},cur:function(){var t=$.propHooks[this.prop];return t&&t.get?t.get(this):$.propHooks._default.get(this)},run:function(t){var e,n=$.propHooks[this.prop];return this.options.duration?this.pos=e=ot.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):$.propHooks._default.set(this),this}},$.prototype.init.prototype=$.prototype,$.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ot.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){ot.fx.step[t.prop]?ot.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ot.cssProps[t.prop]]&&!ot.cssHooks[t.prop]?t.elem[t.prop]=t.now:ot.style(t.elem,t.prop,t.now+t.unit)}}},$.propHooks.scrollTop=$.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ot.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ot.fx=$.prototype.init,ot.fx.step={};var se,oe,re=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;ot.Animation=ot.extend(q,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return c(n.elem,t,Ot.exec(e),n),n}]},tweener:function(t,e){ot.isFunction(t)?(e=t,t=["*"]):t=t.match(xt);for(var n,i=0,s=t.length;i<s;i++)n=t[i],q.tweeners[n]=q.tweeners[n]||[],q.tweeners[n].unshift(e)},prefilters:[L],prefilter:function(t,e){e?q.prefilters.unshift(t):q.prefilters.push(t)}}),ot.speed=function(t,e,n){var i=t&&"object"==typeof t?ot.extend({},t):{complete:n||!n&&e||ot.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ot.isFunction(e)&&e};return i.duration=ot.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in ot.fx.speeds?ot.fx.speeds[i.duration]:ot.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){ot.isFunction(i.old)&&i.old.call(this),i.queue&&ot.dequeue(this,i.queue)},i},ot.fn.extend({fadeTo:function(t,e,n,i){return this.filter(jt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var s=ot.isEmptyObject(t),o=ot.speed(e,n,i),r=function(){var e=q(this,ot.extend({},t),o);(s||Et.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||o.queue===!1?this.each(r):this.queue(o.queue,r);
},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,s=null!=t&&t+"queueHooks",o=ot.timers,r=Et.get(this);if(s)r[s]&&r[s].stop&&i(r[s]);else for(s in r)r[s]&&r[s].stop&&ae.test(s)&&i(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(n),e=!1,o.splice(s,1));!e&&n||ot.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Et.get(this),i=n[t+"queue"],s=n[t+"queueHooks"],o=ot.timers,r=i?i.length:0;for(n.finish=!0,ot.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),ot.each(["toggle","show","hide"],function(t,e){var n=ot.fn[e];ot.fn[e]=function(t,i,s){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(R(e,!0),t,i,s)}}),ot.each({slideDown:R("show"),slideUp:R("hide"),slideToggle:R("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ot.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),ot.timers=[],ot.fx.tick=function(){var t,e=0,n=ot.timers;for(se=ot.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||ot.fx.stop(),se=void 0},ot.fx.timer=function(t){ot.timers.push(t),t()?ot.fx.start():ot.timers.pop()},ot.fx.interval=13,ot.fx.start=function(){oe||(oe=t.setInterval(ot.fx.tick,ot.fx.interval))},ot.fx.stop=function(){t.clearInterval(oe),oe=null},ot.fx.speeds={slow:600,fast:200,_default:400},ot.fn.delay=function(e,n){return e=ot.fx?ot.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var s=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(s)}})},function(){var t=Q.createElement("input"),e=Q.createElement("select"),n=e.appendChild(Q.createElement("option"));t.type="checkbox",it.checkOn=""!==t.value,it.optSelected=n.selected,e.disabled=!0,it.optDisabled=!n.disabled,t=Q.createElement("input"),t.value="t",t.type="radio",it.radioValue="t"===t.value}();var le,ce=ot.expr.attrHandle;ot.fn.extend({attr:function(t,e){return Ct(this,ot.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ot.removeAttr(this,t)})}}),ot.extend({attr:function(t,e,n){var i,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?ot.prop(t,e,n):(1===o&&ot.isXMLDoc(t)||(e=e.toLowerCase(),s=ot.attrHooks[e]||(ot.expr.match.bool.test(e)?le:void 0)),void 0!==n?null===n?void ot.removeAttr(t,e):s&&"set"in s&&void 0!==(i=s.set(t,n,e))?i:(t.setAttribute(e,n+""),n):s&&"get"in s&&null!==(i=s.get(t,e))?i:(i=ot.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!it.radioValue&&"radio"===e&&ot.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,s=0,o=e&&e.match(xt);if(o&&1===t.nodeType)for(;n=o[s++];)i=ot.propFix[n]||n,ot.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),le={set:function(t,e,n){return e===!1?ot.removeAttr(t,n):t.setAttribute(n,n),n}},ot.each(ot.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ce[e]||ot.find.attr;ce[e]=function(t,e,i){var s,o;return i||(o=ce[e],ce[e]=s,s=null!=n(t,e,i)?e.toLowerCase():null,ce[e]=o),s}});var ue=/^(?:input|select|textarea|button)$/i,he=/^(?:a|area)$/i;ot.fn.extend({prop:function(t,e){return Ct(this,ot.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[ot.propFix[t]||t]})}}),ot.extend({prop:function(t,e,n){var i,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ot.isXMLDoc(t)||(e=ot.propFix[e]||e,s=ot.propHooks[e]),void 0!==n?s&&"set"in s&&void 0!==(i=s.set(t,n,e))?i:t[e]=n:s&&"get"in s&&null!==(i=s.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=ot.find.attr(t,"tabindex");return e?parseInt(e,10):ue.test(t.nodeName)||he.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),it.optSelected||(ot.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ot.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ot.propFix[this.toLowerCase()]=this});var pe=/[\t\r\n\f]/g;ot.fn.extend({addClass:function(t){var e,n,i,s,o,r,a,l=0;if(ot.isFunction(t))return this.each(function(e){ot(this).addClass(t.call(this,e,M(this)))});if("string"==typeof t&&t)for(e=t.match(xt)||[];n=this[l++];)if(s=M(n),i=1===n.nodeType&&(" "+s+" ").replace(pe," ")){for(r=0;o=e[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");a=ot.trim(i),s!==a&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,s,o,r,a,l=0;if(ot.isFunction(t))return this.each(function(e){ot(this).removeClass(t.call(this,e,M(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(xt)||[];n=this[l++];)if(s=M(n),i=1===n.nodeType&&(" "+s+" ").replace(pe," ")){for(r=0;o=e[r++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");a=ot.trim(i),s!==a&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):ot.isFunction(t)?this.each(function(n){ot(this).toggleClass(t.call(this,n,M(this),e),e)}):this.each(function(){var e,i,s,o;if("string"===n)for(i=0,s=ot(this),o=t.match(xt)||[];e=o[i++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==n||(e=M(this),e&&Et.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Et.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+M(n)+" ").replace(pe," ").indexOf(e)>-1)return!0;return!1}});var de=/\r/g,fe=/[\x20\t\r\n\f]+/g;ot.fn.extend({val:function(t){var e,n,i,s=this[0];{if(arguments.length)return i=ot.isFunction(t),this.each(function(n){var s;1===this.nodeType&&(s=i?t.call(this,n,ot(this).val()):t,null==s?s="":"number"==typeof s?s+="":ot.isArray(s)&&(s=ot.map(s,function(t){return null==t?"":t+""})),e=ot.valHooks[this.type]||ot.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))});if(s)return e=ot.valHooks[s.type]||ot.valHooks[s.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(s,"value"))?n:(n=s.value,"string"==typeof n?n.replace(de,""):null==n?"":n)}}}),ot.extend({valHooks:{option:{get:function(t){var e=ot.find.attr(t,"value");return null!=e?e:ot.trim(ot.text(t)).replace(fe," ")}},select:{get:function(t){for(var e,n,i=t.options,s=t.selectedIndex,o="select-one"===t.type||s<0,r=o?null:[],a=o?s+1:i.length,l=s<0?a:o?s:0;l<a;l++)if(n=i[l],(n.selected||l===s)&&(it.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ot.nodeName(n.parentNode,"optgroup"))){if(e=ot(n).val(),o)return e;r.push(e)}return r},set:function(t,e){for(var n,i,s=t.options,o=ot.makeArray(e),r=s.length;r--;)i=s[r],(i.selected=ot.inArray(ot.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),ot.each(["radio","checkbox"],function(){ot.valHooks[this]={set:function(t,e){if(ot.isArray(e))return t.checked=ot.inArray(ot(t).val(),e)>-1}},it.checkOn||(ot.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var me=/^(?:focusinfocus|focusoutblur)$/;ot.extend(ot.event,{trigger:function(e,n,i,s){var o,r,a,l,c,u,h,p=[i||Q],d=nt.call(e,"type")?e.type:e,f=nt.call(e,"namespace")?e.namespace.split("."):[];if(r=a=i=i||Q,3!==i.nodeType&&8!==i.nodeType&&!me.test(d+ot.event.triggered)&&(d.indexOf(".")>-1&&(f=d.split("."),d=f.shift(),f.sort()),c=d.indexOf(":")<0&&"on"+d,e=e[ot.expando]?e:new ot.Event(d,"object"==typeof e&&e),e.isTrigger=s?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:ot.makeArray(n,[e]),h=ot.event.special[d]||{},s||!h.trigger||h.trigger.apply(i,n)!==!1)){if(!s&&!h.noBubble&&!ot.isWindow(i)){for(l=h.delegateType||d,me.test(l+d)||(r=r.parentNode);r;r=r.parentNode)p.push(r),a=r;a===(i.ownerDocument||Q)&&p.push(a.defaultView||a.parentWindow||t)}for(o=0;(r=p[o++])&&!e.isPropagationStopped();)e.type=o>1?l:h.bindType||d,u=(Et.get(r,"events")||{})[e.type]&&Et.get(r,"handle"),u&&u.apply(r,n),u=c&&r[c],u&&u.apply&&St(r)&&(e.result=u.apply(r,n),e.result===!1&&e.preventDefault());return e.type=d,s||e.isDefaultPrevented()||h._default&&h._default.apply(p.pop(),n)!==!1||!St(i)||c&&ot.isFunction(i[d])&&!ot.isWindow(i)&&(a=i[c],a&&(i[c]=null),ot.event.triggered=d,i[d](),ot.event.triggered=void 0,a&&(i[c]=a)),e.result}},simulate:function(t,e,n){var i=ot.extend(new ot.Event,n,{type:t,isSimulated:!0});ot.event.trigger(i,null,e)}}),ot.fn.extend({trigger:function(t,e){return this.each(function(){ot.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return ot.event.trigger(t,e,n,!0)}}),ot.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ot.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ot.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),it.focusin="onfocusin"in t,it.focusin||ot.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){ot.event.simulate(e,t.target,ot.event.fix(t))};ot.event.special[e]={setup:function(){var i=this.ownerDocument||this,s=Et.access(i,e);s||i.addEventListener(t,n,!0),Et.access(i,e,(s||0)+1)},teardown:function(){var i=this.ownerDocument||this,s=Et.access(i,e)-1;s?Et.access(i,e,s):(i.removeEventListener(t,n,!0),Et.remove(i,e))}}});var ge=t.location,ve=ot.now(),ye=/\?/;ot.parseJSON=function(t){return JSON.parse(t+"")},ot.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||ot.error("Invalid XML: "+e),n};var be=/#.*$/,we=/([?&])_=[^&]*/,xe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Te=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ce=/^(?:GET|HEAD)$/,Se=/^\/\//,Ee={},ke={},De="*/".concat("*"),Ae=Q.createElement("a");Ae.href=ge.href,ot.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:Te.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":De,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ot.parseJSON,"text xml":ot.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?_(_(t,ot.ajaxSettings),e):_(ot.ajaxSettings,t)},ajaxPrefilter:z(Ee),ajaxTransport:z(ke),ajax:function(e,n){function i(e,n,i,a){var c,h,y,b,x,C=n;2!==w&&(w=2,l&&t.clearTimeout(l),s=void 0,r=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(b=B(p,T,i)),b=U(p,b,T,c),c?(p.ifModified&&(x=T.getResponseHeader("Last-Modified"),x&&(ot.lastModified[o]=x),x=T.getResponseHeader("etag"),x&&(ot.etag[o]=x)),204===e||"HEAD"===p.type?C="nocontent":304===e?C="notmodified":(C=b.state,h=b.data,y=b.error,c=!y)):(y=C,!e&&C||(C="error",e<0&&(e=0))),T.status=e,T.statusText=(n||C)+"",c?m.resolveWith(d,[h,C,T]):m.rejectWith(d,[T,C,y]),T.statusCode(v),v=void 0,u&&f.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?h:y]),g.fireWith(d,[T,C]),u&&(f.trigger("ajaxComplete",[T,p]),--ot.active||ot.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var s,o,r,a,l,c,u,h,p=ot.ajaxSetup({},n),d=p.context||p,f=p.context&&(d.nodeType||d.jquery)?ot(d):ot.event,m=ot.Deferred(),g=ot.Callbacks("once memory"),v=p.statusCode||{},y={},b={},w=0,x="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!a)for(a={};e=xe.exec(r);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?r:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=b[n]=b[n]||t,y[t]=e),this},overrideMimeType:function(t){return w||(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)v[e]=[v[e],t[e]];else T.always(t[T.status]);return this},abort:function(t){var e=t||x;return s&&s.abort(e),i(0,e),this}};if(m.promise(T).complete=g.add,T.success=T.done,T.error=T.fail,p.url=((e||p.url||ge.href)+"").replace(be,"").replace(Se,ge.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=ot.trim(p.dataType||"*").toLowerCase().match(xt)||[""],null==p.crossDomain){c=Q.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Ae.protocol+"//"+Ae.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=ot.param(p.data,p.traditional)),W(Ee,p,n,T),2===w)return T;u=ot.event&&p.global,u&&0===ot.active++&&ot.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ce.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(ye.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=we.test(o)?o.replace(we,"$1_="+ve++):o+(ye.test(o)?"&":"?")+"_="+ve++)),p.ifModified&&(ot.lastModified[o]&&T.setRequestHeader("If-Modified-Since",ot.lastModified[o]),ot.etag[o]&&T.setRequestHeader("If-None-Match",ot.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+De+"; q=0.01":""):p.accepts["*"]);for(h in p.headers)T.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(p.beforeSend.call(d,T,p)===!1||2===w))return T.abort();x="abort";for(h in{success:1,error:1,complete:1})T[h](p[h]);if(s=W(ke,p,n,T)){if(T.readyState=1,u&&f.trigger("ajaxSend",[T,p]),2===w)return T;p.async&&p.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},p.timeout));try{w=1,s.send(y,i)}catch(t){if(!(w<2))throw t;i(-1,t)}}else i(-1,"No Transport");return T},getJSON:function(t,e,n){return ot.get(t,e,n,"json")},getScript:function(t,e){return ot.get(t,void 0,e,"script")}}),ot.each(["get","post"],function(t,e){ot[e]=function(t,n,i,s){return ot.isFunction(n)&&(s=s||i,i=n,n=void 0),ot.ajax(ot.extend({url:t,type:e,dataType:s,data:n,success:i},ot.isPlainObject(t)&&t))}}),ot._evalUrl=function(t){return ot.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},ot.fn.extend({wrapAll:function(t){var e;return ot.isFunction(t)?this.each(function(e){ot(this).wrapAll(t.call(this,e))}):(this[0]&&(e=ot(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return ot.isFunction(t)?this.each(function(e){ot(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ot(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ot.isFunction(t);return this.each(function(n){ot(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){ot.nodeName(this,"body")||ot(this).replaceWith(this.childNodes)}).end()}}),ot.expr.filters.hidden=function(t){return!ot.expr.filters.visible(t)},ot.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Ne=/%20/g,Oe=/\[\]$/,Ie=/\r?\n/g,je=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;ot.param=function(t,e){var n,i=[],s=function(t,e){e=ot.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=ot.ajaxSettings&&ot.ajaxSettings.traditional),ot.isArray(t)||t.jquery&&!ot.isPlainObject(t))ot.each(t,function(){s(this.name,this.value)});else for(n in t)X(n,t[n],e,s);return i.join("&").replace(Ne,"+")},ot.fn.extend({serialize:function(){return ot.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ot.prop(this,"elements");return t?ot.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ot(this).is(":disabled")&&$e.test(this.nodeName)&&!je.test(t)&&(this.checked||!$t.test(t))}).map(function(t,e){var n=ot(this).val();return null==n?null:ot.isArray(n)?ot.map(n,function(t){return{name:e.name,value:t.replace(Ie,"\r\n")}}):{name:e.name,value:n.replace(Ie,"\r\n")}}).get()}}),ot.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var He={0:200,1223:204},Re=ot.ajaxSettings.xhr();it.cors=!!Re&&"withCredentials"in Re,it.ajax=Re=!!Re,ot.ajaxTransport(function(e){var n,i;if(it.cors||Re&&!e.crossDomain)return{send:function(s,o){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest");for(r in s)a.setRequestHeader(r,s[r]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(He[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),ot.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ot.globalEval(t),t}}}),ot.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),ot.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,s){e=ot("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&s("error"===t.type?404:200,t.type)}),Q.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Pe=[],Le=/(=)\?(?=&|$)|\?\?/;ot.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Pe.pop()||ot.expando+"_"+ve++;return this[t]=!0,t}}),ot.ajaxPrefilter("json jsonp",function(e,n,i){var s,o,r,a=e.jsonp!==!1&&(Le.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Le.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return s=e.jsonpCallback=ot.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Le,"$1"+s):e.jsonp!==!1&&(e.url+=(ye.test(e.url)?"&":"?")+e.jsonp+"="+s),e.converters["script json"]=function(){return r||ot.error(s+" was not called"),r[0]},e.dataTypes[0]="json",o=t[s],t[s]=function(){r=arguments},i.always(function(){void 0===o?ot(t).removeProp(s):t[s]=o,e[s]&&(e.jsonpCallback=n.jsonpCallback,Pe.push(s)),r&&ot.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),ot.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Q;var i=ft.exec(t),s=!n&&[];return i?[e.createElement(i[1])]:(i=p([t],e,s),s&&s.length&&ot(s).remove(),ot.merge([],i.childNodes))};var Fe=ot.fn.load;ot.fn.load=function(t,e,n){if("string"!=typeof t&&Fe)return Fe.apply(this,arguments);var i,s,o,r=this,a=t.indexOf(" ");return a>-1&&(i=ot.trim(t.slice(a)),t=t.slice(0,a)),ot.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&ot.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done(function(t){o=arguments,r.html(i?ot("<div>").append(ot.parseHTML(t)).find(i):t)}).always(n&&function(t,e){r.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},ot.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ot.fn[e]=function(t){return this.on(e,t)}}),ot.expr.filters.animated=function(t){return ot.grep(ot.timers,function(e){return t===e.elem}).length},ot.offset={setOffset:function(t,e,n){var i,s,o,r,a,l,c,u=ot.css(t,"position"),h=ot(t),p={};"static"===u&&(t.style.position="relative"),a=h.offset(),o=ot.css(t,"top"),l=ot.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=h.position(),r=i.top,s=i.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),ot.isFunction(e)&&(e=e.call(t,n,ot.extend({},a))),null!=e.top&&(p.top=e.top-a.top+r),null!=e.left&&(p.left=e.left-a.left+s),"using"in e?e.using.call(t,p):h.css(p)}},ot.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ot.offset.setOffset(this,t,e)});var e,n,i=this[0],s={top:0,left:0},o=i&&i.ownerDocument;if(o)return e=o.documentElement,ot.contains(e,i)?(s=i.getBoundingClientRect(),n=Y(o),{top:s.top+n.pageYOffset-e.clientTop,left:s.left+n.pageXOffset-e.clientLeft}):s},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===ot.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ot.nodeName(t[0],"html")||(i=t.offset()),i.top+=ot.css(t[0],"borderTopWidth",!0),i.left+=ot.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-ot.css(n,"marginTop",!0),left:e.left-i.left-ot.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===ot.css(t,"position");)t=t.offsetParent;return t||Jt})}}),ot.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;ot.fn[t]=function(i){return Ct(this,function(t,i,s){var o=Y(t);return void 0===s?o?o[e]:t[i]:void(o?o.scrollTo(n?o.pageXOffset:s,n?s:o.pageYOffset):t[i]=s)},t,i,arguments.length)}}),ot.each(["top","left"],function(t,e){ot.cssHooks[e]=D(it.pixelPosition,function(t,n){if(n)return n=k(t,e),Qt.test(n)?ot(t).position()[e]+"px":n})}),ot.each({Height:"height",Width:"width"},function(t,e){ot.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){ot.fn[i]=function(i,s){var o=arguments.length&&(n||"boolean"!=typeof i),r=n||(i===!0||s===!0?"margin":"border");return Ct(this,function(e,n,i){var s;return ot.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===i?ot.css(e,n,r):ot.style(e,n,i,r)},e,o?i:void 0,o,null)}})}),ot.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),ot.fn.andSelf=ot.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ot});var qe=t.jQuery,Me=t.$;return ot.noConflict=function(e){return t.$===ot&&(t.$=Me),e&&t.jQuery===ot&&(t.jQuery=qe),ot},e||(t.jQuery=t.$=ot),ot}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var s=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(s,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),s=n.data("bs.alert");s||n.data("bs.alert",s=new i(this)),"string"==typeof e&&s[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){r.detach().trigger("closed.bs.alert").remove()}var s=t(this),o=s.attr("data-target");o||(o=s.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var r=t("#"===o?[]:o);e&&e.preventDefault(),r.length||(r=s.closest(".alert")),r.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var s=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=s,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),s=i.data("bs.button"),o="object"==typeof e&&e;s||i.data("bs.button",s=new n(this,o)),"toggle"==e?s.toggle():e&&s.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.3.7",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,s=i.is("input")?"val":"html",o=i.data();e+="Text",null==o.resetText&&i.data("resetText",i[s]()),setTimeout(t.proxy(function(){i[s](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target).closest(".btn");e.call(i,"toggle"),t(n.target).is('input[type="radio"], input[type="checkbox"]')||(n.preventDefault(),i.is("input,button")?i.trigger("focus"):i.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),s=i.data("bs.carousel"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e),r="string"==typeof e?e:o.slide;s||i.data("bs.carousel",s=new n(this,o)),"number"==typeof e?s.to(e):r?s[r]():o.interval&&s.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),i="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(i&&!this.options.wrap)return e;var s="prev"==t?-1:1,o=(n+s)%this.$items.length;return this.$items.eq(o)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){if(!this.sliding)return this.slide("next")},n.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},n.prototype.slide=function(e,i){var s=this.$element.find(".item.active"),o=i||this.getItemForDirection(e,s),r=this.interval,a="next"==e?"left":"right",l=this;if(o.hasClass("active"))return this.sliding=!1;var c=o[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,r&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var h=t(this.$indicators.children()[this.getItemIndex(o)]);h&&h.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,s.addClass(a),o.addClass(a),s.one("bsTransitionEnd",function(){o.removeClass([e,a].join(" ")).addClass("active"),s.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(s.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(p)),r&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var s=function(n){var i,s=t(this),o=t(s.attr("data-target")||(i=s.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=t.extend({},o.data(),s.data()),a=s.attr("data-slide-to");a&&(r.interval=!1),e.call(o,r),a&&o.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",s).on("click.bs.carousel.data-api","[data-slide-to]",s),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),s=n.data("bs.collapse"),o=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);!s&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),s||n.data("bs.collapse",s=new i(this,o)),"string"==typeof e&&s[e]()})}var i=function(e,n){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),
this.options.toggle&&this.toggle()};i.VERSION="3.3.7",i.TRANSITION_DURATION=350,i.DEFAULTS={toggle:!0},i.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,s=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(s&&s.length&&(e=s.data("bs.collapse"),e&&e.transitioning))){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){s&&s.length&&(n.call(s,"hide"),e||s.data("bs.collapse",null));var r=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[r](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[r](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",r].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(i.TRANSITION_DURATION)[r](this.$element[0][l])}}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var s=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(i.TRANSITION_DURATION):s.call(this)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},i.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var s=t(i);this.addAriaAndCollapsedClass(e(s),s)},this)).end()},i.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var s=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=i,t.fn.collapse.noConflict=function(){return t.fn.collapse=s,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var s=t(this);s.attr("data-target")||i.preventDefault();var o=e(s),r=o.data("bs.collapse"),a=r?"toggle":s.data();n.call(o,a)})}(jQuery),+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function n(n){n&&3===n.which||(t(s).remove(),t(o).each(function(){var i=t(this),s=e(i),o={relatedTarget:this};s.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(s[0],n.target)||(s.trigger(n=t.Event("hide.bs.dropdown",o)),n.isDefaultPrevented()||(i.attr("aria-expanded","false"),s.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new r(this)),"string"==typeof e&&i[e].call(n)})}var s=".dropdown-backdrop",o='[data-toggle="dropdown"]',r=function(e){t(e).on("click.bs.dropdown",this.toggle)};r.VERSION="3.3.7",r.prototype.toggle=function(i){var s=t(this);if(!s.is(".disabled, :disabled")){var o=e(s),r=o.hasClass("open");if(n(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var a={relatedTarget:this};if(o.trigger(i=t.Event("show.bs.dropdown",a)),i.isDefaultPrevented())return;s.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},r.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var i=t(this);if(n.preventDefault(),n.stopPropagation(),!i.is(".disabled, :disabled")){var s=e(i),r=s.hasClass("open");if(!r&&27!=n.which||r&&27==n.which)return 27==n.which&&s.find(o).trigger("focus"),i.trigger("click");var a=" li:not(.disabled):visible a",l=s.find(".dropdown-menu"+a);if(l.length){var c=l.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=r,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,r.prototype.toggle).on("keydown.bs.dropdown.data-api",o,r.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",r.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,i){return this.each(function(){var s=t(this),o=s.data("bs.modal"),r=t.extend({},n.DEFAULTS,s.data(),"object"==typeof e&&e);o||s.data("bs.modal",o=new n(this,r)),"string"==typeof e?o[e](i):r.show&&o.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,s=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(s),this.isShown||s.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var s=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),s&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});s?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,s=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&s;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+s).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var r=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",r).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):r()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),s=i.attr("href"),o=t(i.attr("data-target")||s&&s.replace(/.*(?=#[^\s]+$)/,"")),r=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(s)&&s},o.data(),i.data());i.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(o,r,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),s=i.data("bs.tooltip"),o="object"==typeof e&&e;!s&&/destroy|hide/.test(e)||(s||i.data("bs.tooltip",s=new n(this,o)),"string"==typeof e&&s[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var s=this.options.trigger.split(" "),o=s.length;o--;){var r=s[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=r){var a="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),!n.isInStateTrue())return clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var s=this,o=this.tip(),r=this.getUID(this.type);this.setContent(),o.attr("id",r),this.$element.attr("aria-describedby",r),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,c=l.test(a);c&&(a=a.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var u=this.getPosition(),h=o[0].offsetWidth,p=o[0].offsetHeight;if(c){var d=a,f=this.getPosition(this.$viewport);a="bottom"==a&&u.bottom+p>f.bottom?"top":"top"==a&&u.top-p<f.top?"bottom":"right"==a&&u.right+h>f.width?"left":"left"==a&&u.left-h<f.left?"right":a,o.removeClass(d).addClass(a)}var m=this.getCalculatedOffset(a,u,h,p);this.applyPlacement(m,a);var g=function(){var t=s.hoverState;s.$element.trigger("shown.bs."+s.type),s.hoverState=null,"out"==t&&s.leave(s)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",g).emulateTransitionEnd(n.TRANSITION_DURATION):g()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),s=i[0].offsetWidth,o=i[0].offsetHeight,r=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(a)&&(a=0),e.top+=r,e.left+=a,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,c=i[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var h=/top|bottom/.test(n),p=h?2*u.left-s+l:2*u.top-o+c,d=h?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(p,i[0][d],h)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function i(){"in"!=s.hoverState&&o.detach(),s.$element&&s.$element.removeAttr("aria-describedby").trigger("hidden.bs."+s.type),e&&e()}var s=this,o=t(this.$tip),r=t.Event("hide.bs."+this.type);if(this.$element.trigger(r),!r.isDefaultPrevented())return o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",i).emulateTransitionEnd(n.TRANSITION_DURATION):i(),this.hoverState=null,this},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName,s=n.getBoundingClientRect();null==s.width&&(s=t.extend({},s,{width:s.right-s.left,height:s.bottom-s.top}));var o=window.SVGElement&&n instanceof window.SVGElement,r=i?{top:0,left:0}:o?null:e.offset(),a={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},s,a,l,r)},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var s={top:0,left:0};if(!this.$viewport)return s;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-o-r.scroll,l=e.top+o-r.scroll+i;a<r.top?s.top=r.top-a:l>r.top+r.height&&(s.top=r.top+r.height-l)}else{var c=e.left-o,u=e.left+o+n;c<r.left?s.left=r.left-c:u>r.right&&(s.left=r.left+r.width-u)}return s},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var i=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=i,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),s=i.data("bs.popover"),o="object"==typeof e&&e;!s&&/destroy|hide/.test(e)||(s||i.data("bs.popover",s=new n(this,o)),"string"==typeof e&&s[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.7",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var i=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery),+function(t){"use strict";function e(n,i){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),s=i.data("bs.scrollspy"),o="object"==typeof n&&n;s||i.data("bs.scrollspy",s=new e(this,o)),"string"==typeof n&&s[n]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),s=e.data("target")||e.attr("href"),o=/^#./.test(s)&&t(s);return o&&o.length&&o.is(":visible")&&[[o[n]().top+i,s]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),s=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return r!=(t=o[o.length-1])&&this.activate(t);if(r&&e<s[0])return this.activeTarget=null,this.clear();for(t=s.length;t--;)r!=o[t]&&e>=s[t]&&(void 0===s[t+1]||e<s[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),s=i.data("bs.tab");s||i.data("bs.tab",s=new n(this)),"string"==typeof e&&s[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var s=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),r=t.Event("show.bs.tab",{relatedTarget:s[0]});if(s.trigger(o),e.trigger(r),!r.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){s.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:s[0]})})}}},n.prototype.activate=function(e,i,s){function o(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),s&&s()}var r=i.find("> .active"),a=s&&t.support.transition&&(r.length&&r.hasClass("fade")||!!i.find("> .fade").length);r.length&&a?r.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),r.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var s=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',s).on("click.bs.tab.data-api",'[data-toggle="pill"]',s)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),s=i.data("bs.affix"),o="object"==typeof e&&e;s||i.data("bs.affix",s=new n(this,o)),"string"==typeof e&&s[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.7",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var s=this.$target.scrollTop(),o=this.$element.offset(),r=this.$target.height();if(null!=n&&"top"==this.affixed)return s<n&&"top";if("bottom"==this.affixed)return null!=n?!(s+this.unpin<=o.top)&&"bottom":!(s+r<=t-i)&&"bottom";var a=null==this.affixed,l=a?s:o.top,c=a?r:e;return null!=n&&s<=n?"top":null!=i&&l+c>=t-i&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),i=this.options.offset,s=i.top,o=i.bottom,r=Math.max(t(document).height(),t(document.body).height());"object"!=typeof i&&(o=s=i),"function"==typeof s&&(s=i.top(this.$element)),"function"==typeof o&&(o=i.bottom(this.$element));var a=this.getState(r,e,s,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),c=t.Event(l+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:r-e-o})}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),jQuery(function(){initCarousel()}),function(t){function e(e){this.options=t.extend({mask:"div.mask",slider:">*",slides:">*",activeClass:"active",disabledClass:"disabled",btnPrev:"a.btn-prev",btnNext:"a.btn-next",generatePagination:!1,pagerList:"<ul>",pagerListItem:'<li><a href="#"></a></li>',pagerListItemText:"a",pagerLinks:".pagination li",currentNumber:"span.current-num",totalNumber:"span.total-num",btnPlay:".btn-play",btnPause:".btn-pause",btnPlayPause:".btn-play-pause",galleryReadyClass:"gallery-js-ready",autorotationActiveClass:"autorotation-active",autorotationDisabledClass:"autorotation-disabled",stretchSlideToMask:!1,circularRotation:!0,disableWhileAnimating:!1,autoRotation:!1,pauseOnHover:!n,maskAutoSize:!1,switchTime:4e3,animSpeed:600,event:"click",swipeThreshold:15,handleTouch:!0,vertical:!1,useTranslate3D:!1,step:!1},e),this.init()}e.prototype={init:function(){this.options.holder&&(this.findElements(),this.attachEvents(),this.refreshPosition(),this.refreshState(!0),this.resumeRotation(),this.makeCallback("onInit",this))},findElements:function(){if(this.fullSizeFunction=this.options.vertical?"outerHeight":"outerWidth",this.innerSizeFunction=this.options.vertical?"height":"width",this.slideSizeFunction="outerHeight",this.maskSizeProperty="height",this.animProperty=this.options.vertical?"marginTop":"marginLeft",this.gallery=t(this.options.holder).addClass(this.options.galleryReadyClass),this.mask=this.gallery.find(this.options.mask),this.slider=this.mask.find(this.options.slider),this.slides=this.slider.find(this.options.slides),this.btnPrev=this.gallery.find(this.options.btnPrev),this.btnNext=this.gallery.find(this.options.btnNext),this.currentStep=0,this.stepsCount=0,this.options.step===!1){var e=this.slides.filter("."+this.options.activeClass);e.length&&(this.currentStep=this.slides.index(e))}this.calculateOffsets(),"string"==typeof this.options.generatePagination?(this.pagerLinks=t(),this.buildPagination()):(this.pagerLinks=this.gallery.find(this.options.pagerLinks),this.attachPaginationEvents()),this.btnPlay=this.gallery.find(this.options.btnPlay),this.btnPause=this.gallery.find(this.options.btnPause),this.btnPlayPause=this.gallery.find(this.options.btnPlayPause),this.curNum=this.gallery.find(this.options.currentNumber),this.allNum=this.gallery.find(this.options.totalNumber)},attachEvents:function(){var e=this;this.bindHandlers(["onWindowResize"]),t(window).bind("load resize orientationchange",this.onWindowResize),this.btnPrev.length&&(this.prevSlideHandler=function(t){t.preventDefault(),e.prevSlide()},this.btnPrev.bind(this.options.event,this.prevSlideHandler)),this.btnNext.length&&(this.nextSlideHandler=function(t){t.preventDefault(),e.nextSlide()},this.btnNext.bind(this.options.event,this.nextSlideHandler)),this.options.pauseOnHover&&!n&&(this.hoverHandler=function(){e.options.autoRotation&&(e.galleryHover=!0,e.pauseRotation())},this.leaveHandler=function(){e.options.autoRotation&&(e.galleryHover=!1,e.resumeRotation())},this.gallery.bind({mouseenter:this.hoverHandler,mouseleave:this.leaveHandler})),this.btnPlay.length&&(this.btnPlayHandler=function(t){t.preventDefault(),e.startRotation()},this.btnPlay.bind(this.options.event,this.btnPlayHandler)),this.btnPause.length&&(this.btnPauseHandler=function(t){t.preventDefault(),e.stopRotation()},this.btnPause.bind(this.options.event,this.btnPauseHandler)),this.btnPlayPause.length&&(this.btnPlayPauseHandler=function(t){t.preventDefault(),e.gallery.hasClass(e.options.autorotationActiveClass)?e.stopRotation():e.startRotation()},this.btnPlayPause.bind(this.options.event,this.btnPlayPauseHandler)),n&&this.options.useTranslate3D&&this.slider.css({"-webkit-transform":"translate3d(0px, 0px, 0px)"}),n&&this.options.handleTouch&&window.Hammer&&this.mask.length&&(this.swipeHandler=new Hammer.Manager(this.mask[0]),
this.swipeHandler.add(new Hammer.Pan({direction:e.options.vertical?Hammer.DIRECTION_VERTICAL:Hammer.DIRECTION_HORIZONTAL,threshold:e.options.swipeThreshold})),this.swipeHandler.on("panstart",function(){e.galleryAnimating?e.swipeHandler.stop():(e.pauseRotation(),e.originalOffset=parseFloat(e.slider.css(e.animProperty)))}).on("panmove",function(t){var n=e.originalOffset+t[e.options.vertical?"deltaY":"deltaX"];n=Math.max(Math.min(0,n),e.maxOffset),e.slider.css(e.animProperty,n)}).on("panend",function(t){e.resumeRotation(),t.distance>e.options.swipeThreshold?t.offsetDirection===Hammer.DIRECTION_RIGHT||t.offsetDirection===Hammer.DIRECTION_DOWN?e.nextSlide():e.prevSlide():e.switchSlide()}))},onWindowResize:function(){this.galleryAnimating?this.resizeQueue=!0:(this.calculateOffsets(),this.refreshPosition(),this.buildPagination(),this.refreshState(),this.resizeQueue=!1)},refreshPosition:function(){this.currentStep=Math.min(this.currentStep,this.stepsCount-1),this.tmpProps={},this.tmpProps[this.animProperty]=this.getStepOffset(),this.slider.stop().css(this.tmpProps)},calculateOffsets:function(){var e,n,i=this;if(this.options.stretchSlideToMask){var s={};s[this.innerSizeFunction]=this.mask[this.innerSizeFunction](),this.slides.css(s)}if(this.maskSize=this.mask[this.innerSizeFunction](),this.sumSize=this.getSumSize(),this.maxOffset=this.maskSize-this.sumSize,this.options.vertical&&this.options.maskAutoSize){this.options.step=1,this.stepsCount=this.slides.length,this.stepOffsets=[0],e=0;for(var o=0;o<this.slides.length;o++)e-=t(this.slides[o])[this.fullSizeFunction](!0),this.stepOffsets.push(e);return void(this.maxOffset=e)}if("number"==typeof this.options.step&&this.options.step>0)for(this.slideDimensions=[],this.slides.each(t.proxy(function(e,n){i.slideDimensions.push(t(n)[i.fullSizeFunction](!0))},this)),this.stepOffsets=[0],this.stepsCount=1,e=n=0;e>this.maxOffset;)e-=this.getSlideSize(n,n+this.options.step),n+=this.options.step,this.stepOffsets.push(Math.max(e,this.maxOffset)),this.stepsCount++;else for(this.stepSize=this.maskSize,this.stepsCount=1,e=0;e>this.maxOffset;)e-=this.stepSize,this.stepsCount++},getSumSize:function(){var e=0;return this.slides.each(t.proxy(function(n,i){e+=t(i)[this.fullSizeFunction](!0)},this)),this.slider.css(this.innerSizeFunction,e),e},getStepOffset:function(t){return t=t||this.currentStep,"number"==typeof this.options.step?this.stepOffsets[this.currentStep]:Math.min(0,Math.max(-this.currentStep*this.stepSize,this.maxOffset))},getSlideSize:function(t,e){for(var n=0,i=t;i<Math.min(e,this.slideDimensions.length);i++)n+=this.slideDimensions[i];return n},buildPagination:function(){if("string"==typeof this.options.generatePagination&&(this.pagerHolder||(this.pagerHolder=this.gallery.find(this.options.generatePagination)),this.pagerHolder.length&&this.oldStepsCount!=this.stepsCount)){this.oldStepsCount=this.stepsCount,this.pagerHolder.empty(),this.pagerList=t(this.options.pagerList).appendTo(this.pagerHolder);for(var e=0;e<this.stepsCount;e++)t(this.options.pagerListItem).appendTo(this.pagerList).find(this.options.pagerListItemText).text(e+1);this.pagerLinks=this.pagerList.children(),this.attachPaginationEvents()}},attachPaginationEvents:function(){var t=this;this.pagerLinksHandler=function(e){e.preventDefault(),t.numSlide(t.pagerLinks.index(e.currentTarget))},this.pagerLinks.bind(this.options.event,this.pagerLinksHandler)},prevSlide:function(){this.options.disableWhileAnimating&&this.galleryAnimating||(this.currentStep>0?(this.currentStep--,this.switchSlide()):this.options.circularRotation&&(this.currentStep=this.stepsCount-1,this.switchSlide()))},nextSlide:function(t){this.options.disableWhileAnimating&&this.galleryAnimating||(this.currentStep<this.stepsCount-1?(this.currentStep++,this.switchSlide()):(this.options.circularRotation||t===!0)&&(this.currentStep=0,this.switchSlide()))},numSlide:function(t){this.currentStep!=t&&(this.currentStep=t,this.switchSlide())},switchSlide:function(){var t=this;this.galleryAnimating=!0,this.tmpProps={},this.tmpProps[this.animProperty]=this.getStepOffset(),this.slider.stop().animate(this.tmpProps,{duration:this.options.animSpeed,complete:function(){t.galleryAnimating=!1,t.resizeQueue&&t.onWindowResize(),t.makeCallback("onChange",t),t.autoRotate()}}),this.refreshState(),this.makeCallback("onBeforeChange",this)},refreshState:function(t){1!==this.options.step&&this.stepsCount!==this.slides.length||this.slides.removeClass(this.options.activeClass).eq(this.currentStep).addClass(this.options.activeClass),this.pagerLinks.removeClass(this.options.activeClass).eq(this.currentStep).addClass(this.options.activeClass),this.curNum.html(this.currentStep+1),this.allNum.html(this.stepsCount),this.options.maskAutoSize&&"number"==typeof this.options.step&&(this.tmpProps={},this.tmpProps[this.maskSizeProperty]=this.slides.eq(Math.min(this.currentStep,this.slides.length-1))[this.slideSizeFunction](!0),this.mask.stop()[t?"css":"animate"](this.tmpProps)),this.options.circularRotation||(this.btnPrev.add(this.btnNext).removeClass(this.options.disabledClass),0===this.currentStep&&this.btnPrev.addClass(this.options.disabledClass),this.currentStep===this.stepsCount-1&&this.btnNext.addClass(this.options.disabledClass)),this.gallery.toggleClass("not-enough-slides",this.sumSize<=this.maskSize)},startRotation:function(){this.options.autoRotation=!0,this.galleryHover=!1,this.autoRotationStopped=!1,this.resumeRotation()},stopRotation:function(){this.galleryHover=!0,this.autoRotationStopped=!0,this.pauseRotation()},pauseRotation:function(){this.gallery.addClass(this.options.autorotationDisabledClass),this.gallery.removeClass(this.options.autorotationActiveClass),clearTimeout(this.timer)},resumeRotation:function(){this.autoRotationStopped||(this.gallery.addClass(this.options.autorotationActiveClass),this.gallery.removeClass(this.options.autorotationDisabledClass),this.autoRotate())},autoRotate:function(){var t=this;clearTimeout(this.timer),!this.options.autoRotation||this.galleryHover||this.autoRotationStopped?this.pauseRotation():this.timer=setTimeout(function(){t.nextSlide(!0)},this.options.switchTime)},bindHandlers:function(e){var n=this;t.each(e,function(t,e){var i=n[e];n[e]=function(){return i.apply(n,arguments)}})},makeCallback:function(t){if("function"==typeof this.options[t]){var e=Array.prototype.slice.call(arguments);e.shift(),this.options[t].apply(this,e)}},destroy:function(){t(window).unbind("load resize orientationchange",this.onWindowResize),this.btnPrev.unbind(this.options.event,this.prevSlideHandler),this.btnNext.unbind(this.options.event,this.nextSlideHandler),this.pagerLinks.unbind(this.options.event,this.pagerLinksHandler),this.gallery.unbind("mouseenter",this.hoverHandler),this.gallery.unbind("mouseleave",this.leaveHandler),this.stopRotation(),this.btnPlay.unbind(this.options.event,this.btnPlayHandler),this.btnPause.unbind(this.options.event,this.btnPauseHandler),this.btnPlayPause.unbind(this.options.event,this.btnPlayPauseHandler),this.swipeHandler&&this.swipeHandler.destroy();var e=[this.options.galleryReadyClass,this.options.autorotationActiveClass,this.options.autorotationDisabledClass];this.gallery.removeClass(e.join(" ")),this.slider.add(this.slides).removeAttr("style"),"string"==typeof this.options.generatePagination&&this.pagerHolder.empty()}};var n=/Windows Phone/.test(navigator.userAgent)||"ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch;t.fn.scrollGallery=function(n){return this.each(function(){t(this).data("ScrollGallery",new e(t.extend(n,{holder:this})))})}}(jQuery),Object.create&&!function(t,e,n,i){"use strict";function s(t,e,n){return setTimeout(u(t,n),e)}function o(t,e,n){return!!Array.isArray(t)&&(r(t,n[e],n),!0)}function r(t,e,n){var s;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==i)for(s=0;s<t.length;)e.call(n,t[s],s,t),s++;else for(s in t)t.hasOwnProperty(s)&&e.call(n,t[s],s,t)}function a(t,e,n){for(var s=Object.keys(e),o=0;o<s.length;)(!n||n&&t[s[o]]===i)&&(t[s[o]]=e[s[o]]),o++;return t}function l(t,e){return a(t,e,!0)}function c(t,e,n){var i,s=e.prototype;i=t.prototype=Object.create(s),i.constructor=t,i._super=s,n&&a(i,n)}function u(t,e){return function(){return t.apply(e,arguments)}}function h(t,e){return typeof t==ut?t.apply(e?e[0]||i:i,e):t}function p(t,e){return t===i?e:t}function d(t,e,n){r(v(e),function(e){t.addEventListener(e,n,!1)})}function f(t,e,n){r(v(e),function(e){t.removeEventListener(e,n,!1)})}function m(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function g(t,e){return t.indexOf(e)>-1}function v(t){return t.trim().split(/\s+/g)}function y(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function b(t){return Array.prototype.slice.call(t,0)}function w(t,e,n){for(var i=[],s=[],o=0;o<t.length;){var r=e?t[o][e]:t[o];y(s,r)<0&&i.push(t[o]),s[o]=r,o++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function x(t,e){for(var n,s,o=e[0].toUpperCase()+e.slice(1),r=0;r<lt.length;){if(n=lt[r],s=n?n+o:e,s in t)return s;r++}return i}function T(){return ft++}function C(t){var e=t.ownerDocument;return e.defaultView||e.parentWindow}function S(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){h(t.options.enable,[t])&&n.handler(e)},this.init()}function E(t){var e,n=t.options.inputClass;return new(e=n?n:vt?q:yt?W:gt?B:F)(t,k)}function k(t,e,n){var i=n.pointers.length,s=n.changedPointers.length,o=e&St&&i-s===0,r=e&(kt|Dt)&&i-s===0;n.isFirst=!!o,n.isFinal=!!r,o&&(t.session={}),n.eventType=e,D(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function D(t,e){var n=t.session,i=e.pointers,s=i.length;n.firstInput||(n.firstInput=O(e)),s>1&&!n.firstMultiple?n.firstMultiple=O(e):1===s&&(n.firstMultiple=!1);var o=n.firstInput,r=n.firstMultiple,a=r?r.center:o.center,l=e.center=I(i);e.timeStamp=dt(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=R(a,l),e.distance=H(a,l),A(n,e),e.offsetDirection=$(e.deltaX,e.deltaY),e.scale=r?L(r.pointers,i):1,e.rotation=r?P(r.pointers,i):0,N(n,e);var c=t.element;m(e.srcEvent.target,c)&&(c=e.srcEvent.target),e.target=c}function A(t,e){var n=e.center,i=t.offsetDelta||{},s=t.prevDelta||{},o=t.prevInput||{};(e.eventType===St||o.eventType===kt)&&(s=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=s.x+(n.x-i.x),e.deltaY=s.y+(n.y-i.y)}function N(t,e){var n,s,o,r,a=t.lastInterval||e,l=e.timeStamp-a.timeStamp;if(e.eventType!=Dt&&(l>Ct||a.velocity===i)){var c=a.deltaX-e.deltaX,u=a.deltaY-e.deltaY,h=j(l,c,u);s=h.x,o=h.y,n=pt(h.x)>pt(h.y)?h.x:h.y,r=$(c,u),t.lastInterval=e}else n=a.velocity,s=a.velocityX,o=a.velocityY,r=a.direction;e.velocity=n,e.velocityX=s,e.velocityY=o,e.direction=r}function O(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:ht(t.pointers[n].clientX),clientY:ht(t.pointers[n].clientY)},n++;return{timeStamp:dt(),pointers:e,center:I(e),deltaX:t.deltaX,deltaY:t.deltaY}}function I(t){var e=t.length;if(1===e)return{x:ht(t[0].clientX),y:ht(t[0].clientY)};for(var n=0,i=0,s=0;e>s;)n+=t[s].clientX,i+=t[s].clientY,s++;return{x:ht(n/e),y:ht(i/e)}}function j(t,e,n){return{x:e/t||0,y:n/t||0}}function $(t,e){return t===e?At:pt(t)>=pt(e)?t>0?Nt:Ot:e>0?It:jt}function H(t,e,n){n||(n=Pt);var i=e[n[0]]-t[n[0]],s=e[n[1]]-t[n[1]];return Math.sqrt(i*i+s*s)}function R(t,e,n){n||(n=Pt);var i=e[n[0]]-t[n[0]],s=e[n[1]]-t[n[1]];return 180*Math.atan2(s,i)/Math.PI}function P(t,e){return R(e[1],e[0],Lt)-R(t[1],t[0],Lt)}function L(t,e){return H(e[0],e[1],Lt)/H(t[0],t[1],Lt)}function F(){this.evEl=qt,this.evWin=Mt,this.allow=!0,this.pressed=!1,S.apply(this,arguments)}function q(){this.evEl=_t,this.evWin=Bt,S.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function M(){this.evTarget=Xt,this.evWin=Yt,this.started=!1,S.apply(this,arguments)}function z(t,e){var n=b(t.touches),i=b(t.changedTouches);return e&(kt|Dt)&&(n=w(n.concat(i),"identifier",!0)),[n,i]}function W(){this.evTarget=Qt,this.targetIds={},S.apply(this,arguments)}function _(t,e){var n=b(t.touches),i=this.targetIds;if(e&(St|Et)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var s,o,r=b(t.changedTouches),a=[],l=this.target;if(o=n.filter(function(t){return m(t.target,l)}),e===St)for(s=0;s<o.length;)i[o[s].identifier]=!0,s++;for(s=0;s<r.length;)i[r[s].identifier]&&a.push(r[s]),e&(kt|Dt)&&delete i[r[s].identifier],s++;return a.length?[w(o.concat(a),"identifier",!0),a]:void 0}function B(){S.apply(this,arguments);var t=u(this.handler,this);this.touch=new W(this.manager,t),this.mouse=new F(this.manager,t)}function U(t,e){this.manager=t,this.set(e)}function X(t){if(g(t,ee))return ee;var e=g(t,ne),n=g(t,ie);return e&&n?ne+" "+ie:e||n?e?ne:ie:g(t,te)?te:Zt}function Y(t){this.id=T(),this.manager=null,this.options=l(t||{},this.defaults),this.options.enable=p(this.options.enable,!0),this.state=se,this.simultaneous={},this.requireFail=[]}function V(t){return t&ce?"cancel":t&ae?"end":t&re?"move":t&oe?"start":""}function Q(t){return t==jt?"down":t==It?"up":t==Nt?"left":t==Ot?"right":""}function K(t,e){var n=e.manager;return n?n.get(t):t}function G(){Y.apply(this,arguments)}function J(){G.apply(this,arguments),this.pX=null,this.pY=null}function Z(){G.apply(this,arguments)}function tt(){Y.apply(this,arguments),this._timer=null,this._input=null}function et(){G.apply(this,arguments)}function nt(){G.apply(this,arguments)}function it(){Y.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function st(t,e){return e=e||{},e.recognizers=p(e.recognizers,st.defaults.preset),new ot(t,e)}function ot(t,e){e=e||{},this.options=l(e,st.defaults),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.element=t,this.input=E(this),this.touchAction=new U(this,this.options.touchAction),rt(this,!0),r(e.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function rt(t,e){var n=t.element;r(t.options.cssProps,function(t,i){n.style[x(n.style,i)]=e?t:""})}function at(t,n){var i=e.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var lt=["","webkit","moz","MS","ms","o"],ct=e.createElement("div"),ut="function",ht=Math.round,pt=Math.abs,dt=Date.now,ft=1,mt=/mobile|tablet|ip(ad|hone|od)|android/i,gt="ontouchstart"in t,vt=x(t,"PointerEvent")!==i,yt=gt&&mt.test(navigator.userAgent),bt="touch",wt="pen",xt="mouse",Tt="kinect",Ct=25,St=1,Et=2,kt=4,Dt=8,At=1,Nt=2,Ot=4,It=8,jt=16,$t=Nt|Ot,Ht=It|jt,Rt=$t|Ht,Pt=["x","y"],Lt=["clientX","clientY"];S.prototype={handler:function(){},init:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(C(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(C(this.element),this.evWin,this.domHandler)}};var Ft={mousedown:St,mousemove:Et,mouseup:kt},qt="mousedown",Mt="mousemove mouseup";c(F,S,{handler:function(t){var e=Ft[t.type];e&St&&0===t.button&&(this.pressed=!0),e&Et&&1!==t.which&&(e=kt),this.pressed&&this.allow&&(e&kt&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:xt,srcEvent:t}))}});var zt={pointerdown:St,pointermove:Et,pointerup:kt,pointercancel:Dt,pointerout:Dt},Wt={2:bt,3:wt,4:xt,5:Tt},_t="pointerdown",Bt="pointermove pointerup pointercancel";t.MSPointerEvent&&(_t="MSPointerDown",Bt="MSPointerMove MSPointerUp MSPointerCancel"),c(q,S,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),s=zt[i],o=Wt[t.pointerType]||t.pointerType,r=o==bt,a=y(e,t.pointerId,"pointerId");s&St&&(0===t.button||r)?0>a&&(e.push(t),a=e.length-1):s&(kt|Dt)&&(n=!0),0>a||(e[a]=t,this.callback(this.manager,s,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var Ut={touchstart:St,touchmove:Et,touchend:kt,touchcancel:Dt},Xt="touchstart",Yt="touchstart touchmove touchend touchcancel";c(M,S,{handler:function(t){var e=Ut[t.type];if(e===St&&(this.started=!0),this.started){var n=z.call(this,t,e);e&(kt|Dt)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:bt,srcEvent:t})}}});var Vt={touchstart:St,touchmove:Et,touchend:kt,touchcancel:Dt},Qt="touchstart touchmove touchend touchcancel";c(W,S,{handler:function(t){var e=Vt[t.type],n=_.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:bt,srcEvent:t})}}),c(B,S,{handler:function(t,e,n){var i=n.pointerType==bt,s=n.pointerType==xt;if(i)this.mouse.allow=!1;else if(s&&!this.mouse.allow)return;e&(kt|Dt)&&(this.mouse.allow=!0),this.callback(t,e,n)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Kt=x(ct.style,"touchAction"),Gt=Kt!==i,Jt="compute",Zt="auto",te="manipulation",ee="none",ne="pan-x",ie="pan-y";U.prototype={set:function(t){t==Jt&&(t=this.compute()),Gt&&(this.manager.element.style[Kt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return r(this.manager.recognizers,function(e){h(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),X(t.join(" "))},preventDefaults:function(t){if(!Gt){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,s=g(i,ee),o=g(i,ie),r=g(i,ne);return s||o&&n&$t||r&&n&Ht?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var se=1,oe=2,re=4,ae=8,le=ae,ce=16,ue=32;Y.prototype={defaults:{},set:function(t){return a(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(o(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=K(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return o(t,"dropRecognizeWith",this)?this:(t=K(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(o(t,"requireFailure",this))return this;var e=this.requireFail;return t=K(t,this),-1===y(e,t)&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(o(t,"dropRequireFailure",this))return this;t=K(t,this);var e=y(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(n.options.event+(e?V(i):""),t)}var n=this,i=this.state;ae>i&&e(!0),e(),i>=ae&&e(!0)},tryEmit:function(t){return this.canEmit()?this.emit(t):void(this.state=ue)},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(ue|se)))return!1;t++}return!0},recognize:function(t){var e=a({},t);return h(this.options.enable,[this,e])?(this.state&(le|ce|ue)&&(this.state=se),this.state=this.process(e),void(this.state&(oe|re|ae|ce)&&this.tryEmit(e))):(this.reset(),void(this.state=ue))},process:function(){},getTouchAction:function(){},reset:function(){}},c(G,Y,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(oe|re),s=this.attrTest(t);return i&&(n&Dt||!s)?e|ce:i||s?n&kt?e|ae:e&oe?e|re:oe:ue}}),c(J,G,{defaults:{event:"pan",threshold:10,pointers:1,direction:Rt},getTouchAction:function(){var t=this.options.direction,e=[];return t&$t&&e.push(ie),t&Ht&&e.push(ne),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,s=t.direction,o=t.deltaX,r=t.deltaY;return s&e.direction||(e.direction&$t?(s=0===o?At:0>o?Nt:Ot,n=o!=this.pX,i=Math.abs(t.deltaX)):(s=0===r?At:0>r?It:jt,n=r!=this.pY,i=Math.abs(t.deltaY))),t.direction=s,n&&i>e.threshold&&s&e.direction},attrTest:function(t){return G.prototype.attrTest.call(this,t)&&(this.state&oe||!(this.state&oe)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Q(t.direction);e&&this.manager.emit(this.options.event+e,t),this._super.emit.call(this,t)}}),c(Z,G,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[ee]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&oe)},emit:function(t){if(this._super.emit.call(this,t),1!==t.scale){var e=t.scale<1?"in":"out";this.manager.emit(this.options.event+e,t)}}}),c(tt,Y,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return[Zt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,o=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(kt|Dt)&&!o)this.reset();else if(t.eventType&St)this.reset(),this._timer=s(function(){this.state=le,this.tryEmit()},e.time,this);else if(t.eventType&kt)return le;return ue},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===le&&(t&&t.eventType&kt?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=dt(),this.manager.emit(this.options.event,this._input)))}}),c(et,G,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[ee]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&oe)}}),c(nt,G,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:$t|Ht,pointers:1},getTouchAction:function(){return J.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&($t|Ht)?e=t.velocity:n&$t?e=t.velocityX:n&Ht&&(e=t.velocityY),this._super.attrTest.call(this,t)&&n&t.direction&&t.distance>this.options.threshold&&pt(e)>this.options.velocity&&t.eventType&kt},emit:function(t){var e=Q(t.direction);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),c(it,Y,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[te]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,o=t.deltaTime<e.time;if(this.reset(),t.eventType&St&&0===this.count)return this.failTimeout();if(i&&o&&n){if(t.eventType!=kt)return this.failTimeout();var r=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||H(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,a&&r?this.count+=1:this.count=1,this._input=t;var l=this.count%e.taps;if(0===l)return this.hasRequireFailures()?(this._timer=s(function(){this.state=le,this.tryEmit()},e.interval,this),oe):le}return ue},failTimeout:function(){return this._timer=s(function(){this.state=ue},this.options.interval,this),ue},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==le&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),st.VERSION="2.0.4",st.defaults={domEvents:!1,touchAction:Jt,enable:!0,inputTarget:null,inputClass:null,preset:[[et,{enable:!1}],[Z,{enable:!1},["rotate"]],[nt,{direction:$t}],[J,{direction:$t},["swipe"]],[it],[it,{event:"doubletap",taps:2},["tap"]],[tt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var he=1,pe=2;ot.prototype={set:function(t){return a(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?pe:he},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,s=e.curRecognizer;(!s||s&&s.state&le)&&(s=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],e.stopped===pe||s&&n!=s&&!n.canRecognizeWith(s)?n.reset():n.recognize(t),!s&&n.state&(oe|re|ae)&&(s=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Y)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(o(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(o(t,"remove",this))return this;var e=this.recognizers;return t=this.get(t),e.splice(y(e,t),1),this.touchAction.update(),this},on:function(t,e){var n=this.handlers;return r(v(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this},off:function(t,e){var n=this.handlers;return r(v(t),function(t){e?n[t].splice(y(n[t],e),1):delete n[t]}),this},emit:function(t,e){this.options.domEvents&&at(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&rt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},a(st,{INPUT_START:St,INPUT_MOVE:Et,INPUT_END:kt,INPUT_CANCEL:Dt,STATE_POSSIBLE:se,STATE_BEGAN:oe,STATE_CHANGED:re,STATE_ENDED:ae,STATE_RECOGNIZED:le,STATE_CANCELLED:ce,STATE_FAILED:ue,DIRECTION_NONE:At,DIRECTION_LEFT:Nt,DIRECTION_RIGHT:Ot,DIRECTION_UP:It,DIRECTION_DOWN:jt,DIRECTION_HORIZONTAL:$t,DIRECTION_VERTICAL:Ht,DIRECTION_ALL:Rt,Manager:ot,Input:S,TouchAction:U,TouchInput:W,MouseInput:F,PointerEventInput:q,TouchMouseInput:B,SingleTouchInput:M,Recognizer:Y,AttrRecognizer:G,Tap:it,Pan:J,Swipe:nt,Pinch:Z,Rotate:et,Press:tt,on:d,off:f,each:r,merge:l,extend:a,inherit:c,bindFn:u,prefixed:x}),typeof define==ut&&define.amd?define(function(){return st}):"undefined"!=typeof module&&module.exports?module.exports=st:t[n]=st}(window,document,"Hammer"),function(t,e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):t.jcf=e(jQuery)}(this,function(t){"use strict";var e="1.1.3",n=[],i={optionsKey:"jcf",dataKey:"jcf-instance",rtlClass:"jcf-rtl",focusClass:"jcf-focus",pressedClass:"jcf-pressed",disabledClass:"jcf-disabled",hiddenClass:"jcf-hidden",resetAppearanceClass:"jcf-reset-appearance",unselectableClass:"jcf-unselectable"},s="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,o=/Windows Phone/.test(navigator.userAgent);i.isMobileDevice=!(!s&&!o);var r=function(){var e=t("<style>").appendTo("head"),n=e.prop("sheet")||e.prop("styleSheet"),s=function(t,e,i){n.insertRule?n.insertRule(t+"{"+e+"}",i):n.addRule(t,e,i)};s("."+i.hiddenClass,"position:absolute !important;left:-9999px !important;height:1px !important;width:1px !important;margin:0 !important;border-width:0 !important;-webkit-appearance:none;-moz-appearance:none;appearance:none"),s("."+i.rtlClass+" ."+i.hiddenClass,"right:-9999px !important; left: auto !important"),s("."+i.unselectableClass,"-webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0);"),s("."+i.resetAppearanceClass,"background: none; border: none; -webkit-appearance: none; appearance: none; opacity: 0; filter: alpha(opacity=0);");var o=t("html"),r=t("body");"rtl"!==o.css("direction")&&"rtl"!==r.css("direction")||o.addClass(i.rtlClass),o.on("reset",function(){setTimeout(function(){l.refreshAll()},0)}),i.styleSheetCreated=!0};!function(){var e,n=navigator.pointerEnabled||navigator.msPointerEnabled,i="ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,s={},o="jcf-";e=n?{pointerover:navigator.pointerEnabled?"pointerover":"MSPointerOver",pointerdown:navigator.pointerEnabled?"pointerdown":"MSPointerDown",pointermove:navigator.pointerEnabled?"pointermove":"MSPointerMove",pointerup:navigator.pointerEnabled?"pointerup":"MSPointerUp"}:{pointerover:"mouseover",pointerdown:"mousedown"+(i?" touchstart":""),pointermove:"mousemove"+(i?" touchmove":""),pointerup:"mouseup"+(i?" touchend":"")},t.each(e,function(e,n){t.each(n.split(" "),function(t,n){s[n]=e})}),t.each(e,function(e,n){n=n.split(" "),t.event.special[o+e]={setup:function(){var e=this;t.each(n,function(t,n){e.addEventListener?e.addEventListener(n,l,!1):e["on"+n]=l})},teardown:function(){var e=this;t.each(n,function(t,n){e.addEventListener?e.removeEventListener(n,l,!1):e["on"+n]=null})}}});var r=null,a=function(t){var e=Math.abs(t.pageX-r.x),n=Math.abs(t.pageY-r.y),i=25;if(e<=i&&n<=i)return!0},l=function(e){var n=e||window.event,i=null,l=s[n.type];if(e=t.event.fix(n),e.type=o+l,n.pointerType)switch(n.pointerType){case 2:e.pointerType="touch";break;case 3:e.pointerType="pen";break;case 4:e.pointerType="mouse";break;default:e.pointerType=n.pointerType}else e.pointerType=n.type.substr(0,5);return e.pageX||e.pageY||(i=n.changedTouches?n.changedTouches[0]:n,e.pageX=i.pageX,e.pageY=i.pageY),"touchend"===n.type&&(r={x:e.pageX,y:e.pageY}),"mouse"===e.pointerType&&r&&a(e)?void 0:(t.event.dispatch||t.event.handle).call(this,e)}}(),function(){var e=("onwheel"in document||document.documentMode>=9?"wheel":"mousewheel DOMMouseScroll").split(" "),n="jcf-mousewheel";t.event.special[n]={setup:function(){var n=this;t.each(e,function(t,e){n.addEventListener?n.addEventListener(e,i,!1):n["on"+e]=i})},teardown:function(){var n=this;t.each(e,function(t,e){n.addEventListener?n.removeEventListener(e,i,!1):n["on"+e]=null})}};var i=function(e){var i=e||window.event;if(e=t.event.fix(i),e.type=n,"detail"in i&&(e.deltaY=-i.detail),"wheelDelta"in i&&(e.deltaY=-i.wheelDelta),"wheelDeltaY"in i&&(e.deltaY=-i.wheelDeltaY),"wheelDeltaX"in i&&(e.deltaX=-i.wheelDeltaX),"deltaY"in i&&(e.deltaY=i.deltaY),"deltaX"in i&&(e.deltaX=i.deltaX),e.delta=e.deltaY||e.deltaX,1===i.deltaMode){var s=16;e.delta*=s,e.deltaY*=s,e.deltaX*=s}return(t.event.dispatch||t.event.handle).call(this,e)}}();var a={fireNativeEvent:function(e,n){t(e).each(function(){var t,e=this;e.dispatchEvent?(t=document.createEvent("HTMLEvents"),t.initEvent(n,!0,!0),e.dispatchEvent(t)):document.createEventObject&&(t=document.createEventObject(),t.target=e,e.fireEvent("on"+n,t))})},bindHandlers:function(){var e=this;t.each(e,function(n,i){0===n.indexOf("on")&&t.isFunction(i)&&(e[n]=function(){return i.apply(e,arguments)})})}},l={version:e,modules:{},getOptions:function(){return t.extend({},i)},setOptions:function(e,n){arguments.length>1?this.modules[e]&&t.extend(this.modules[e].prototype.options,n):t.extend(i,e)},addModule:function(e){var s=function(e){e.element.data(i.dataKey)||e.element.data(i.dataKey,this),n.push(this),this.options=t.extend({},i,this.options,o(e.element),e),this.bindHandlers(),this.init.apply(this,arguments)},o=function(e){var n=e.data(i.optionsKey),s=e.attr(i.optionsKey);if(n)return n;if(s)try{return t.parseJSON(s)}catch(t){}};s.prototype=e,t.extend(e,a),e.plugins&&t.each(e.plugins,function(e,n){t.extend(n.prototype,a)});var r=s.prototype.destroy;s.prototype.destroy=function(){this.options.element.removeData(this.options.dataKey);for(var t=n.length-1;t>=0;t--)if(n[t]===this){n.splice(t,1);break}r&&r.apply(this,arguments)},this.modules[e.name]=s},getInstance:function(e){return t(e).data(i.dataKey)},replace:function(e,n,s){var o,a=this;return i.styleSheetCreated||r(),t(e).each(function(){var e,r=t(this);o=r.data(i.dataKey),o?o.refresh():(n||t.each(a.modules,function(t,e){if(e.prototype.matchElement.call(e.prototype,r))return n=t,!1}),n&&(e=t.extend({element:r},s),o=new a.modules[n](e)))}),o},refresh:function(e){t(e).each(function(){var e=t(this).data(i.dataKey);e&&e.refresh()})},destroy:function(e){t(e).each(function(){var e=t(this).data(i.dataKey);e&&e.destroy()})},replaceAll:function(e){var n=this;t.each(this.modules,function(i,s){t(s.prototype.selector,e).each(function(){this.className.indexOf("jcf-ignore")<0&&n.replace(this,i)})})},refreshAll:function(e){if(e)t.each(this.modules,function(n,s){t(s.prototype.selector,e).each(function(){var e=t(this).data(i.dataKey);e&&e.refresh()})});else for(var s=n.length-1;s>=0;s--)n[s].refresh();
},destroyAll:function(e){if(e)t.each(this.modules,function(n,s){t(s.prototype.selector,e).each(function(e,n){var s=t(n).data(i.dataKey);s&&s.destroy()})});else for(;n.length;)n[0].destroy()}};return window.jcf=l,l}),function(t,e){"use strict";function n(e){this.options=t.extend({wrapNative:!0,wrapNativeOnMobile:!0,fakeDropInBody:!0,useCustomScroll:!0,flipDropToFit:!0,maxVisibleItems:10,fakeAreaStructure:'<span class="jcf-select"><span class="jcf-select-text"></span><span class="jcf-select-opener"></span></span>',fakeDropStructure:'<div class="jcf-select-drop"><div class="jcf-select-drop-content"></div></div>',optionClassPrefix:"jcf-option-",selectClassPrefix:"jcf-select-",dropContentSelector:".jcf-select-drop-content",selectTextSelector:".jcf-select-text",dropActiveClass:"jcf-drop-active",flipDropClass:"jcf-drop-flipped"},e),this.init()}function i(e){this.options=t.extend({wrapNative:!0,useCustomScroll:!0,fakeStructure:'<span class="jcf-list-box"><span class="jcf-list-wrapper"></span></span>',selectClassPrefix:"jcf-select-",listHolder:".jcf-list-wrapper"},e),this.init()}function s(e){this.options=t.extend({holder:null,maxVisibleItems:10,selectOnClick:!0,useHoverClass:!1,useCustomScroll:!1,handleResize:!0,multipleSelectWithoutKey:!1,alwaysPreventMouseWheel:!1,indexAttribute:"data-index",cloneClassPrefix:"jcf-option-",containerStructure:'<span class="jcf-list"><span class="jcf-list-content"></span></span>',containerSelector:".jcf-list-content",captionClass:"jcf-optgroup-caption",disabledClass:"jcf-disabled",optionClass:"jcf-option",groupClass:"jcf-optgroup",hoverClass:"jcf-hover",selectedClass:"jcf-selected",scrollClass:"jcf-scroll-active"},e),this.init()}jcf.addModule({name:"Select",selector:"select",options:{element:null,multipleCompactStyle:!1},plugins:{ListBox:i,ComboBox:n,SelectList:s},matchElement:function(t){return t.is("select")},init:function(){this.element=t(this.options.element),this.createInstance()},isListBox:function(){return this.element.is("[size]:not([jcf-size]), [multiple]")},createInstance:function(){this.instance&&this.instance.destroy(),this.isListBox()&&!this.options.multipleCompactStyle?this.instance=new i(this.options):this.instance=new n(this.options)},refresh:function(){var t=this.isListBox()&&this.instance instanceof n||!this.isListBox()&&this.instance instanceof i;t?this.createInstance():this.instance.refresh()},destroy:function(){this.instance.destroy()}}),t.extend(n.prototype,{init:function(){this.initStructure(),this.bindHandlers(),this.attachEvents(),this.refresh()},initStructure:function(){this.win=t(e),this.doc=t(document),this.realElement=t(this.options.element),this.fakeElement=t(this.options.fakeAreaStructure).insertAfter(this.realElement),this.selectTextContainer=this.fakeElement.find(this.options.selectTextSelector),this.selectText=t("<span></span>").appendTo(this.selectTextContainer),r(this.fakeElement),this.fakeElement.addClass(o(this.realElement.prop("className"),this.options.selectClassPrefix)),this.realElement.prop("multiple")&&this.fakeElement.addClass("jcf-compact-multiple"),this.options.isMobileDevice&&this.options.wrapNativeOnMobile&&!this.options.wrapNative&&(this.options.wrapNative=!0),this.options.wrapNative?this.realElement.prependTo(this.fakeElement).css({position:"absolute",height:"100%",width:"100%"}).addClass(this.options.resetAppearanceClass):(this.realElement.addClass(this.options.hiddenClass),this.fakeElement.attr("title",this.realElement.attr("title")),this.fakeDropTarget=this.options.fakeDropInBody?t("body"):this.fakeElement)},attachEvents:function(){var t=this;this.delayedRefresh=function(){setTimeout(function(){t.refresh(),t.list&&(t.list.refresh(),t.list.scrollToActiveOption())},1)},this.options.wrapNative?this.realElement.on({focus:this.onFocus,change:this.onChange,click:this.onChange,keydown:this.onChange}):(this.realElement.on({focus:this.onFocus,change:this.onChange,keydown:this.onKeyDown}),this.fakeElement.on({"jcf-pointerdown":this.onSelectAreaPress}))},onKeyDown:function(t){13===t.which?this.toggleDropdown():this.dropActive&&this.delayedRefresh()},onChange:function(){this.refresh()},onFocus:function(){this.pressedFlag&&this.focusedFlag||(this.fakeElement.addClass(this.options.focusClass),this.realElement.on("blur",this.onBlur),this.toggleListMode(!0),this.focusedFlag=!0)},onBlur:function(){this.pressedFlag||(this.fakeElement.removeClass(this.options.focusClass),this.realElement.off("blur",this.onBlur),this.toggleListMode(!1),this.focusedFlag=!1)},onResize:function(){this.dropActive&&this.hideDropdown()},onSelectDropPress:function(){this.pressedFlag=!0},onSelectDropRelease:function(t,e){this.pressedFlag=!1,"mouse"===e.pointerType&&this.realElement.focus()},onSelectAreaPress:function(e){var n=!this.options.fakeDropInBody&&t(e.target).closest(this.dropdown).length;n||e.button>1||this.realElement.is(":disabled")||(this.selectOpenedByEvent=e.pointerType,this.toggleDropdown(),this.focusedFlag||("mouse"===e.pointerType?this.realElement.focus():this.onFocus(e)),this.pressedFlag=!0,this.fakeElement.addClass(this.options.pressedClass),this.doc.on("jcf-pointerup",this.onSelectAreaRelease))},onSelectAreaRelease:function(t){this.focusedFlag&&"mouse"===t.pointerType&&this.realElement.focus(),this.pressedFlag=!1,this.fakeElement.removeClass(this.options.pressedClass),this.doc.off("jcf-pointerup",this.onSelectAreaRelease)},onOutsideClick:function(e){var n=t(e.target),i=n.closest(this.fakeElement).length||n.closest(this.dropdown).length;i||this.hideDropdown()},onSelect:function(){this.refresh(),this.realElement.prop("multiple")?this.repositionDropdown():this.hideDropdown(),this.fireNativeEvent(this.realElement,"change")},toggleListMode:function(t){this.options.wrapNative||(t?this.realElement.attr({size:4,"jcf-size":""}):this.options.wrapNative||this.realElement.removeAttr("size jcf-size"))},createDropdown:function(){this.dropdown&&(this.list.destroy(),this.dropdown.remove()),this.dropdown=t(this.options.fakeDropStructure).appendTo(this.fakeDropTarget),this.dropdown.addClass(o(this.realElement.prop("className"),this.options.selectClassPrefix)),r(this.dropdown),this.realElement.prop("multiple")&&this.dropdown.addClass("jcf-compact-multiple"),this.options.fakeDropInBody&&this.dropdown.css({position:"absolute",top:-9999}),this.list=new s({useHoverClass:!0,handleResize:!1,alwaysPreventMouseWheel:!0,maxVisibleItems:this.options.maxVisibleItems,useCustomScroll:this.options.useCustomScroll,holder:this.dropdown.find(this.options.dropContentSelector),multipleSelectWithoutKey:this.realElement.prop("multiple"),element:this.realElement}),t(this.list).on({select:this.onSelect,press:this.onSelectDropPress,release:this.onSelectDropRelease})},repositionDropdown:function(){var t,e,n,i=this.fakeElement.offset(),s=this.fakeElement.outerWidth(),o=this.fakeElement.outerHeight(),r=this.dropdown.css("width",s).outerHeight(),a=this.win.scrollTop(),l=this.win.height(),c=!1;i.top+o+r>a+l&&i.top-r>a&&(c=!0),this.options.fakeDropInBody&&(n="static"!==this.fakeDropTarget.css("position")?this.fakeDropTarget.offset().top:0,this.options.flipDropToFit&&c?(e=i.left,t=i.top-r-n):(e=i.left,t=i.top+o-n),this.dropdown.css({width:s,left:e,top:t})),this.dropdown.add(this.fakeElement).toggleClass(this.options.flipDropClass,this.options.flipDropToFit&&c)},showDropdown:function(){this.realElement.prop("options").length&&(this.dropdown||this.createDropdown(),this.dropActive=!0,this.dropdown.appendTo(this.fakeDropTarget),this.fakeElement.addClass(this.options.dropActiveClass),this.refreshSelectedText(),this.repositionDropdown(),this.list.setScrollTop(this.savedScrollTop),this.list.refresh(),this.win.on("resize",this.onResize),this.doc.on("jcf-pointerdown",this.onOutsideClick))},hideDropdown:function(){this.dropdown&&(this.savedScrollTop=this.list.getScrollTop(),this.fakeElement.removeClass(this.options.dropActiveClass+" "+this.options.flipDropClass),this.dropdown.removeClass(this.options.flipDropClass).detach(),this.doc.off("jcf-pointerdown",this.onOutsideClick),this.win.off("resize",this.onResize),this.dropActive=!1,"touch"===this.selectOpenedByEvent&&this.onBlur())},toggleDropdown:function(){this.dropActive?this.hideDropdown():this.showDropdown()},refreshSelectedText:function(){var e,n=this.realElement.prop("selectedIndex"),i=this.realElement.prop("options")[n],s=i?i.getAttribute("data-image"):null,r="",a=this;this.realElement.prop("multiple")?(t.each(this.realElement.prop("options"),function(t,e){e.selected&&(r+=(r?", ":"")+e.innerHTML)}),r||(r=a.realElement.attr("placeholder")||""),this.selectText.removeAttr("class").html(r)):i?this.currentSelectedText===i.innerHTML&&this.currentSelectedImage===s||(e=o(i.className,this.options.optionClassPrefix),this.selectText.attr("class",e).html(i.innerHTML),s?(this.selectImage||(this.selectImage=t("<img>").prependTo(this.selectTextContainer).hide()),this.selectImage.attr("src",s).show()):this.selectImage&&this.selectImage.hide(),this.currentSelectedText=i.innerHTML,this.currentSelectedImage=s):(this.selectImage&&this.selectImage.hide(),this.selectText.removeAttr("class").empty())},refresh:function(){"none"===this.realElement.prop("style").display?this.fakeElement.hide():this.fakeElement.show(),this.refreshSelectedText(),this.fakeElement.toggleClass(this.options.disabledClass,this.realElement.is(":disabled"))},destroy:function(){this.options.wrapNative?this.realElement.insertBefore(this.fakeElement).css({position:"",height:"",width:""}).removeClass(this.options.resetAppearanceClass):(this.realElement.removeClass(this.options.hiddenClass),this.realElement.is("[jcf-size]")&&this.realElement.removeAttr("size jcf-size")),this.fakeElement.remove(),this.doc.off("jcf-pointerup",this.onSelectAreaRelease),this.realElement.off({focus:this.onFocus})}}),t.extend(i.prototype,{init:function(){this.bindHandlers(),this.initStructure(),this.attachEvents()},initStructure:function(){this.realElement=t(this.options.element),this.fakeElement=t(this.options.fakeStructure).insertAfter(this.realElement),this.listHolder=this.fakeElement.find(this.options.listHolder),r(this.fakeElement),this.fakeElement.addClass(o(this.realElement.prop("className"),this.options.selectClassPrefix)),this.realElement.addClass(this.options.hiddenClass),this.list=new s({useCustomScroll:this.options.useCustomScroll,holder:this.listHolder,selectOnClick:!1,element:this.realElement})},attachEvents:function(){var e=this;this.delayedRefresh=function(t){t&&16===t.which||(clearTimeout(e.refreshTimer),e.refreshTimer=setTimeout(function(){e.refresh(),e.list.scrollToActiveOption()},1))},this.realElement.on({focus:this.onFocus,click:this.delayedRefresh,keydown:this.delayedRefresh}),t(this.list).on({select:this.onSelect,press:this.onFakeOptionsPress,release:this.onFakeOptionsRelease})},onFakeOptionsPress:function(t,e){this.pressedFlag=!0,"mouse"===e.pointerType&&this.realElement.focus()},onFakeOptionsRelease:function(t,e){this.pressedFlag=!1,"mouse"===e.pointerType&&this.realElement.focus()},onSelect:function(){this.fireNativeEvent(this.realElement,"change"),this.fireNativeEvent(this.realElement,"click")},onFocus:function(){this.pressedFlag&&this.focusedFlag||(this.fakeElement.addClass(this.options.focusClass),this.realElement.on("blur",this.onBlur),this.focusedFlag=!0)},onBlur:function(){this.pressedFlag||(this.fakeElement.removeClass(this.options.focusClass),this.realElement.off("blur",this.onBlur),this.focusedFlag=!1)},refresh:function(){this.fakeElement.toggleClass(this.options.disabledClass,this.realElement.is(":disabled")),this.list.refresh()},destroy:function(){this.list.destroy(),this.realElement.insertBefore(this.fakeElement).removeClass(this.options.hiddenClass),this.fakeElement.remove()}}),t.extend(s.prototype,{init:function(){this.initStructure(),this.refreshSelectedClass(),this.attachEvents()},initStructure:function(){this.element=t(this.options.element),this.indexSelector="["+this.options.indexAttribute+"]",this.container=t(this.options.containerStructure).appendTo(this.options.holder),this.listHolder=this.container.find(this.options.containerSelector),this.lastClickedIndex=this.element.prop("selectedIndex"),this.rebuildList()},attachEvents:function(){this.bindHandlers(),this.listHolder.on("jcf-pointerdown",this.indexSelector,this.onItemPress),this.listHolder.on("jcf-pointerdown",this.onPress),this.options.useHoverClass&&this.listHolder.on("jcf-pointerover",this.indexSelector,this.onHoverItem)},onPress:function(e){t(this).trigger("press",e),this.listHolder.on("jcf-pointerup",this.onRelease)},onRelease:function(e){t(this).trigger("release",e),this.listHolder.off("jcf-pointerup",this.onRelease)},onHoverItem:function(t){var e=parseFloat(t.currentTarget.getAttribute(this.options.indexAttribute));this.fakeOptions.removeClass(this.options.hoverClass).eq(e).addClass(this.options.hoverClass)},onItemPress:function(t){"touch"===t.pointerType||this.options.selectOnClick?(this.tmpListOffsetTop=this.list.offset().top,this.listHolder.on("jcf-pointerup",this.indexSelector,this.onItemRelease)):this.onSelectItem(t)},onItemRelease:function(t){this.listHolder.off("jcf-pointerup",this.indexSelector,this.onItemRelease),this.tmpListOffsetTop===this.list.offset().top&&this.listHolder.on("click",this.indexSelector,{savedPointerType:t.pointerType},this.onSelectItem),delete this.tmpListOffsetTop},onSelectItem:function(e){var n,i=parseFloat(e.currentTarget.getAttribute(this.options.indexAttribute)),s=e.data&&e.data.savedPointerType||e.pointerType||"mouse";this.listHolder.off("click",this.indexSelector,this.onSelectItem),e.button>1||this.realOptions[i].disabled||(this.element.prop("multiple")?e.metaKey||e.ctrlKey||"touch"===s||this.options.multipleSelectWithoutKey?this.realOptions[i].selected=!this.realOptions[i].selected:e.shiftKey?(n=[this.lastClickedIndex,i].sort(function(t,e){return t-e}),this.realOptions.each(function(t,e){e.selected=t>=n[0]&&t<=n[1]})):this.element.prop("selectedIndex",i):this.element.prop("selectedIndex",i),e.shiftKey||(this.lastClickedIndex=i),this.refreshSelectedClass(),"mouse"===s&&this.scrollToActiveOption(),t(this).trigger("select"))},rebuildList:function(){var e=this,n=this.element[0];this.storedSelectHTML=n.innerHTML,this.optionIndex=0,this.list=t(this.createOptionsList(n)),this.listHolder.empty().append(this.list),this.realOptions=this.element.find("option"),this.fakeOptions=this.list.find(this.indexSelector),this.fakeListItems=this.list.find("."+this.options.captionClass+","+this.indexSelector),delete this.optionIndex;var i=this.options.maxVisibleItems,s=this.element.prop("size");s>1&&!this.element.is("[jcf-size]")&&(i=s);var o=this.fakeOptions.length>i;return this.container.toggleClass(this.options.scrollClass,o),o&&(this.listHolder.css({maxHeight:this.getOverflowHeight(i),overflow:"auto"}),this.options.useCustomScroll&&jcf.modules.Scrollable)?void jcf.replace(this.listHolder,"Scrollable",{handleResize:this.options.handleResize,alwaysPreventMouseWheel:this.options.alwaysPreventMouseWheel}):void(this.options.alwaysPreventMouseWheel&&(this.preventWheelHandler=function(t){var n=e.listHolder.scrollTop(),i=e.listHolder.prop("scrollHeight")-e.listHolder.innerHeight();(n<=0&&t.deltaY<0||n>=i&&t.deltaY>0)&&t.preventDefault()},this.listHolder.on("jcf-mousewheel",this.preventWheelHandler)))},refreshSelectedClass:function(){var t,e=this,n=this.element.prop("multiple"),i=this.element.prop("selectedIndex");n?this.realOptions.each(function(t,n){e.fakeOptions.eq(t).toggleClass(e.options.selectedClass,!!n.selected)}):(this.fakeOptions.removeClass(this.options.selectedClass+" "+this.options.hoverClass),t=this.fakeOptions.eq(i).addClass(this.options.selectedClass),this.options.useHoverClass&&t.addClass(this.options.hoverClass))},scrollToActiveOption:function(){var t=this.getActiveOptionOffset();"number"==typeof t&&this.listHolder.prop("scrollTop",t)},getSelectedIndexRange:function(){var t=-1,e=-1;return this.realOptions.each(function(n,i){i.selected&&(t<0&&(t=n),e=n)}),[t,e]},getChangedSelectedIndex:function(){var t,e=this.element.prop("selectedIndex");return this.element.prop("multiple")?(this.previousRange||(this.previousRange=[e,e]),this.currentRange=this.getSelectedIndexRange(),t=this.currentRange[this.currentRange[0]!==this.previousRange[0]?0:1],this.previousRange=this.currentRange,t):e},getActiveOptionOffset:function(){var t=this.listHolder.height(),e=this.listHolder.prop("scrollTop"),n=this.getChangedSelectedIndex(),i=this.fakeOptions.eq(n),s=i.offset().top-this.list.offset().top,o=i.innerHeight();return s+o>=e+t?s-t+o:s<e?s:void 0},getOverflowHeight:function(t){var e=this.fakeListItems.eq(t-1),n=this.list.offset().top,i=e.offset().top,s=e.innerHeight();return i+s-n},getScrollTop:function(){return this.listHolder.scrollTop()},setScrollTop:function(t){this.listHolder.scrollTop(t)},createOption:function(t){var e=document.createElement("span");e.className=this.options.optionClass,e.innerHTML=t.innerHTML,e.setAttribute(this.options.indexAttribute,this.optionIndex++);var n,i=t.getAttribute("data-image");return i&&(n=document.createElement("img"),n.src=i,e.insertBefore(n,e.childNodes[0])),t.disabled&&(e.className+=" "+this.options.disabledClass),t.className&&(e.className+=" "+o(t.className,this.options.cloneClassPrefix)),e},createOptGroup:function(t){var e,n,i=document.createElement("span"),s=t.getAttribute("label");return e=document.createElement("span"),e.className=this.options.captionClass,e.innerHTML=s,i.appendChild(e),t.children.length&&(n=this.createOptionsList(t),i.appendChild(n)),i.className=this.options.groupClass,i},createOptionContainer:function(){var t=document.createElement("li");return t},createOptionsList:function(e){var n=this,i=document.createElement("ul");return t.each(e.children,function(t,e){var s,o=n.createOptionContainer(e);switch(e.tagName.toLowerCase()){case"option":s=n.createOption(e);break;case"optgroup":s=n.createOptGroup(e)}i.appendChild(o).appendChild(s)}),i},refresh:function(){this.storedSelectHTML!==this.element.prop("innerHTML")&&this.rebuildList();var t=jcf.getInstance(this.listHolder);t&&t.refresh(),this.refreshSelectedClass()},destroy:function(){this.listHolder.off("jcf-mousewheel",this.preventWheelHandler),this.listHolder.off("jcf-pointerdown",this.indexSelector,this.onSelectItem),this.listHolder.off("jcf-pointerover",this.indexSelector,this.onHoverItem),this.listHolder.off("jcf-pointerdown",this.onPress)}});var o=function(t,e){return t?t.replace(/[\s]*([\S]+)+[\s]*/gi,e+"$1 "):""},r=function(){function t(t){t.preventDefault()}var e=jcf.getOptions().unselectableClass;return function(n){n.addClass(e).on("selectstart",t)}}()}(jQuery,this),$(document).ready(function(){function t(){$(".about-us_link_block").css("display","block"),$("#offer").css("display","none")}$(function(){jcf.replaceAll()});var e=$(".file_upload"),n=e.find("input"),i=e.find("button"),s=e.find("div");i.focus(function(){n.focus()}),n.focus(function(){e.addClass("focus")}).blur(function(){e.removeClass("focus")}),i.add(s).click(function(){n.click()}),i.focus(function(){e.addClass("focus")}).blur(function(){e.removeClass("focus")});var o=!!(window.File&&window.FileReader&&window.FileList&&window.Blob);n.change(function(){var t;t=o&&n[0].files[0]?n[0].files[0].name:n.val().replace("C:\\fakepath\\",""),t.length&&(s.is(":visible")?(s.text(t),i.text("Выбрать")):i.text(t))}).change(),$(window).resize(function(){$(".file_upload input").triggerHandler("change")});var r=document.getElementById("offer");r.onclick=t}),window.innerWidth>980&&$(document).ready(function(){setEqualHeight($(".our-prorose_blocks figure")),setEqualHeight($(".contacts_blocks .span6"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
